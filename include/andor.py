# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_andor', [dirname(__file__)])
        except ImportError:
            import _andor
            return _andor
        if fp is not None:
            try:
                _mod = imp.load_module('_andor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _andor = swig_import_helper()
    del swig_import_helper
else:
    import _andor
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SYSTEMTIME(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SYSTEMTIME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SYSTEMTIME, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wYear"] = _andor.SYSTEMTIME_wYear_set
    __swig_getmethods__["wYear"] = _andor.SYSTEMTIME_wYear_get
    if _newclass:wYear = _swig_property(_andor.SYSTEMTIME_wYear_get, _andor.SYSTEMTIME_wYear_set)
    __swig_setmethods__["wMonth"] = _andor.SYSTEMTIME_wMonth_set
    __swig_getmethods__["wMonth"] = _andor.SYSTEMTIME_wMonth_get
    if _newclass:wMonth = _swig_property(_andor.SYSTEMTIME_wMonth_get, _andor.SYSTEMTIME_wMonth_set)
    __swig_setmethods__["wDayOfWeek"] = _andor.SYSTEMTIME_wDayOfWeek_set
    __swig_getmethods__["wDayOfWeek"] = _andor.SYSTEMTIME_wDayOfWeek_get
    if _newclass:wDayOfWeek = _swig_property(_andor.SYSTEMTIME_wDayOfWeek_get, _andor.SYSTEMTIME_wDayOfWeek_set)
    __swig_setmethods__["wDay"] = _andor.SYSTEMTIME_wDay_set
    __swig_getmethods__["wDay"] = _andor.SYSTEMTIME_wDay_get
    if _newclass:wDay = _swig_property(_andor.SYSTEMTIME_wDay_get, _andor.SYSTEMTIME_wDay_set)
    __swig_setmethods__["wHour"] = _andor.SYSTEMTIME_wHour_set
    __swig_getmethods__["wHour"] = _andor.SYSTEMTIME_wHour_get
    if _newclass:wHour = _swig_property(_andor.SYSTEMTIME_wHour_get, _andor.SYSTEMTIME_wHour_set)
    __swig_setmethods__["wMinute"] = _andor.SYSTEMTIME_wMinute_set
    __swig_getmethods__["wMinute"] = _andor.SYSTEMTIME_wMinute_get
    if _newclass:wMinute = _swig_property(_andor.SYSTEMTIME_wMinute_get, _andor.SYSTEMTIME_wMinute_set)
    __swig_setmethods__["wSecond"] = _andor.SYSTEMTIME_wSecond_set
    __swig_getmethods__["wSecond"] = _andor.SYSTEMTIME_wSecond_get
    if _newclass:wSecond = _swig_property(_andor.SYSTEMTIME_wSecond_get, _andor.SYSTEMTIME_wSecond_set)
    __swig_setmethods__["wMilliseconds"] = _andor.SYSTEMTIME_wMilliseconds_set
    __swig_getmethods__["wMilliseconds"] = _andor.SYSTEMTIME_wMilliseconds_get
    if _newclass:wMilliseconds = _swig_property(_andor.SYSTEMTIME_wMilliseconds_get, _andor.SYSTEMTIME_wMilliseconds_set)
    def __init__(self): 
        this = _andor.new_SYSTEMTIME()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _andor.delete_SYSTEMTIME
    __del__ = lambda self : None;
SYSTEMTIME_swigregister = _andor.SYSTEMTIME_swigregister
SYSTEMTIME_swigregister(SYSTEMTIME)

AT_SDKVersion = _andor.AT_SDKVersion
AT_DeviceDriverVersion = _andor.AT_DeviceDriverVersion
AT_NoOfVersionInfoIds = _andor.AT_NoOfVersionInfoIds
AT_VERSION_INFO_LEN = _andor.AT_VERSION_INFO_LEN
AT_CONTROLLER_CARD_MODEL_LEN = _andor.AT_CONTROLLER_CARD_MODEL_LEN
AT_DDGLite_ChannelA = _andor.AT_DDGLite_ChannelA
AT_DDGLite_ChannelB = _andor.AT_DDGLite_ChannelB
AT_DDGLite_ChannelC = _andor.AT_DDGLite_ChannelC
AT_DDGLite_ControlBit_GlobalEnable = _andor.AT_DDGLite_ControlBit_GlobalEnable
AT_DDGLite_ControlBit_ChannelEnable = _andor.AT_DDGLite_ControlBit_ChannelEnable
AT_DDGLite_ControlBit_FreeRun = _andor.AT_DDGLite_ControlBit_FreeRun
AT_DDGLite_ControlBit_DisableOnFrame = _andor.AT_DDGLite_ControlBit_DisableOnFrame
AT_DDGLite_ControlBit_RestartOnFire = _andor.AT_DDGLite_ControlBit_RestartOnFire
AT_DDGLite_ControlBit_Invert = _andor.AT_DDGLite_ControlBit_Invert
AT_DDGLite_ControlBit_EnableOnFire = _andor.AT_DDGLite_ControlBit_EnableOnFire
AT_DDG_POLARITY_POSITIVE = _andor.AT_DDG_POLARITY_POSITIVE
AT_DDG_POLARITY_NEGATIVE = _andor.AT_DDG_POLARITY_NEGATIVE
AT_DDG_TERMINATION_50OHMS = _andor.AT_DDG_TERMINATION_50OHMS
AT_DDG_TERMINATION_HIGHZ = _andor.AT_DDG_TERMINATION_HIGHZ
AT_STEPMODE_CONSTANT = _andor.AT_STEPMODE_CONSTANT
AT_STEPMODE_EXPONENTIAL = _andor.AT_STEPMODE_EXPONENTIAL
AT_STEPMODE_LOGARITHMIC = _andor.AT_STEPMODE_LOGARITHMIC
AT_STEPMODE_LINEAR = _andor.AT_STEPMODE_LINEAR
AT_STEPMODE_OFF = _andor.AT_STEPMODE_OFF
AT_GATEMODE_FIRE_AND_GATE = _andor.AT_GATEMODE_FIRE_AND_GATE
AT_GATEMODE_FIRE_ONLY = _andor.AT_GATEMODE_FIRE_ONLY
AT_GATEMODE_GATE_ONLY = _andor.AT_GATEMODE_GATE_ONLY
AT_GATEMODE_CW_ON = _andor.AT_GATEMODE_CW_ON
AT_GATEMODE_CW_OFF = _andor.AT_GATEMODE_CW_OFF
AT_GATEMODE_DDG = _andor.AT_GATEMODE_DDG
class AndorCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AndorCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AndorCapabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ulSize"] = _andor.AndorCapabilities_ulSize_set
    __swig_getmethods__["ulSize"] = _andor.AndorCapabilities_ulSize_get
    if _newclass:ulSize = _swig_property(_andor.AndorCapabilities_ulSize_get, _andor.AndorCapabilities_ulSize_set)
    __swig_setmethods__["ulAcqModes"] = _andor.AndorCapabilities_ulAcqModes_set
    __swig_getmethods__["ulAcqModes"] = _andor.AndorCapabilities_ulAcqModes_get
    if _newclass:ulAcqModes = _swig_property(_andor.AndorCapabilities_ulAcqModes_get, _andor.AndorCapabilities_ulAcqModes_set)
    __swig_setmethods__["ulReadModes"] = _andor.AndorCapabilities_ulReadModes_set
    __swig_getmethods__["ulReadModes"] = _andor.AndorCapabilities_ulReadModes_get
    if _newclass:ulReadModes = _swig_property(_andor.AndorCapabilities_ulReadModes_get, _andor.AndorCapabilities_ulReadModes_set)
    __swig_setmethods__["ulTriggerModes"] = _andor.AndorCapabilities_ulTriggerModes_set
    __swig_getmethods__["ulTriggerModes"] = _andor.AndorCapabilities_ulTriggerModes_get
    if _newclass:ulTriggerModes = _swig_property(_andor.AndorCapabilities_ulTriggerModes_get, _andor.AndorCapabilities_ulTriggerModes_set)
    __swig_setmethods__["ulCameraType"] = _andor.AndorCapabilities_ulCameraType_set
    __swig_getmethods__["ulCameraType"] = _andor.AndorCapabilities_ulCameraType_get
    if _newclass:ulCameraType = _swig_property(_andor.AndorCapabilities_ulCameraType_get, _andor.AndorCapabilities_ulCameraType_set)
    __swig_setmethods__["ulPixelMode"] = _andor.AndorCapabilities_ulPixelMode_set
    __swig_getmethods__["ulPixelMode"] = _andor.AndorCapabilities_ulPixelMode_get
    if _newclass:ulPixelMode = _swig_property(_andor.AndorCapabilities_ulPixelMode_get, _andor.AndorCapabilities_ulPixelMode_set)
    __swig_setmethods__["ulSetFunctions"] = _andor.AndorCapabilities_ulSetFunctions_set
    __swig_getmethods__["ulSetFunctions"] = _andor.AndorCapabilities_ulSetFunctions_get
    if _newclass:ulSetFunctions = _swig_property(_andor.AndorCapabilities_ulSetFunctions_get, _andor.AndorCapabilities_ulSetFunctions_set)
    __swig_setmethods__["ulGetFunctions"] = _andor.AndorCapabilities_ulGetFunctions_set
    __swig_getmethods__["ulGetFunctions"] = _andor.AndorCapabilities_ulGetFunctions_get
    if _newclass:ulGetFunctions = _swig_property(_andor.AndorCapabilities_ulGetFunctions_get, _andor.AndorCapabilities_ulGetFunctions_set)
    __swig_setmethods__["ulFeatures"] = _andor.AndorCapabilities_ulFeatures_set
    __swig_getmethods__["ulFeatures"] = _andor.AndorCapabilities_ulFeatures_get
    if _newclass:ulFeatures = _swig_property(_andor.AndorCapabilities_ulFeatures_get, _andor.AndorCapabilities_ulFeatures_set)
    __swig_setmethods__["ulPCICard"] = _andor.AndorCapabilities_ulPCICard_set
    __swig_getmethods__["ulPCICard"] = _andor.AndorCapabilities_ulPCICard_get
    if _newclass:ulPCICard = _swig_property(_andor.AndorCapabilities_ulPCICard_get, _andor.AndorCapabilities_ulPCICard_set)
    __swig_setmethods__["ulEMGainCapability"] = _andor.AndorCapabilities_ulEMGainCapability_set
    __swig_getmethods__["ulEMGainCapability"] = _andor.AndorCapabilities_ulEMGainCapability_get
    if _newclass:ulEMGainCapability = _swig_property(_andor.AndorCapabilities_ulEMGainCapability_get, _andor.AndorCapabilities_ulEMGainCapability_set)
    __swig_setmethods__["ulFTReadModes"] = _andor.AndorCapabilities_ulFTReadModes_set
    __swig_getmethods__["ulFTReadModes"] = _andor.AndorCapabilities_ulFTReadModes_get
    if _newclass:ulFTReadModes = _swig_property(_andor.AndorCapabilities_ulFTReadModes_get, _andor.AndorCapabilities_ulFTReadModes_set)
    def __init__(self): 
        this = _andor.new_AndorCapabilities()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _andor.delete_AndorCapabilities
    __del__ = lambda self : None;
AndorCapabilities_swigregister = _andor.AndorCapabilities_swigregister
AndorCapabilities_swigregister(AndorCapabilities)

class ColorDemosaicInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorDemosaicInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorDemosaicInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iX"] = _andor.ColorDemosaicInfo_iX_set
    __swig_getmethods__["iX"] = _andor.ColorDemosaicInfo_iX_get
    if _newclass:iX = _swig_property(_andor.ColorDemosaicInfo_iX_get, _andor.ColorDemosaicInfo_iX_set)
    __swig_setmethods__["iY"] = _andor.ColorDemosaicInfo_iY_set
    __swig_getmethods__["iY"] = _andor.ColorDemosaicInfo_iY_get
    if _newclass:iY = _swig_property(_andor.ColorDemosaicInfo_iY_get, _andor.ColorDemosaicInfo_iY_set)
    __swig_setmethods__["iAlgorithm"] = _andor.ColorDemosaicInfo_iAlgorithm_set
    __swig_getmethods__["iAlgorithm"] = _andor.ColorDemosaicInfo_iAlgorithm_get
    if _newclass:iAlgorithm = _swig_property(_andor.ColorDemosaicInfo_iAlgorithm_get, _andor.ColorDemosaicInfo_iAlgorithm_set)
    __swig_setmethods__["iXPhase"] = _andor.ColorDemosaicInfo_iXPhase_set
    __swig_getmethods__["iXPhase"] = _andor.ColorDemosaicInfo_iXPhase_get
    if _newclass:iXPhase = _swig_property(_andor.ColorDemosaicInfo_iXPhase_get, _andor.ColorDemosaicInfo_iXPhase_set)
    __swig_setmethods__["iYPhase"] = _andor.ColorDemosaicInfo_iYPhase_set
    __swig_getmethods__["iYPhase"] = _andor.ColorDemosaicInfo_iYPhase_get
    if _newclass:iYPhase = _swig_property(_andor.ColorDemosaicInfo_iYPhase_get, _andor.ColorDemosaicInfo_iYPhase_set)
    __swig_setmethods__["iBackground"] = _andor.ColorDemosaicInfo_iBackground_set
    __swig_getmethods__["iBackground"] = _andor.ColorDemosaicInfo_iBackground_get
    if _newclass:iBackground = _swig_property(_andor.ColorDemosaicInfo_iBackground_get, _andor.ColorDemosaicInfo_iBackground_set)
    def __init__(self): 
        this = _andor.new_ColorDemosaicInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _andor.delete_ColorDemosaicInfo
    __del__ = lambda self : None;
ColorDemosaicInfo_swigregister = _andor.ColorDemosaicInfo_swigregister
ColorDemosaicInfo_swigregister(ColorDemosaicInfo)

class WhiteBalanceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WhiteBalanceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WhiteBalanceInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iSize"] = _andor.WhiteBalanceInfo_iSize_set
    __swig_getmethods__["iSize"] = _andor.WhiteBalanceInfo_iSize_get
    if _newclass:iSize = _swig_property(_andor.WhiteBalanceInfo_iSize_get, _andor.WhiteBalanceInfo_iSize_set)
    __swig_setmethods__["iX"] = _andor.WhiteBalanceInfo_iX_set
    __swig_getmethods__["iX"] = _andor.WhiteBalanceInfo_iX_get
    if _newclass:iX = _swig_property(_andor.WhiteBalanceInfo_iX_get, _andor.WhiteBalanceInfo_iX_set)
    __swig_setmethods__["iY"] = _andor.WhiteBalanceInfo_iY_set
    __swig_getmethods__["iY"] = _andor.WhiteBalanceInfo_iY_get
    if _newclass:iY = _swig_property(_andor.WhiteBalanceInfo_iY_get, _andor.WhiteBalanceInfo_iY_set)
    __swig_setmethods__["iAlgorithm"] = _andor.WhiteBalanceInfo_iAlgorithm_set
    __swig_getmethods__["iAlgorithm"] = _andor.WhiteBalanceInfo_iAlgorithm_get
    if _newclass:iAlgorithm = _swig_property(_andor.WhiteBalanceInfo_iAlgorithm_get, _andor.WhiteBalanceInfo_iAlgorithm_set)
    __swig_setmethods__["iROI_left"] = _andor.WhiteBalanceInfo_iROI_left_set
    __swig_getmethods__["iROI_left"] = _andor.WhiteBalanceInfo_iROI_left_get
    if _newclass:iROI_left = _swig_property(_andor.WhiteBalanceInfo_iROI_left_get, _andor.WhiteBalanceInfo_iROI_left_set)
    __swig_setmethods__["iROI_right"] = _andor.WhiteBalanceInfo_iROI_right_set
    __swig_getmethods__["iROI_right"] = _andor.WhiteBalanceInfo_iROI_right_get
    if _newclass:iROI_right = _swig_property(_andor.WhiteBalanceInfo_iROI_right_get, _andor.WhiteBalanceInfo_iROI_right_set)
    __swig_setmethods__["iROI_top"] = _andor.WhiteBalanceInfo_iROI_top_set
    __swig_getmethods__["iROI_top"] = _andor.WhiteBalanceInfo_iROI_top_get
    if _newclass:iROI_top = _swig_property(_andor.WhiteBalanceInfo_iROI_top_get, _andor.WhiteBalanceInfo_iROI_top_set)
    __swig_setmethods__["iROI_bottom"] = _andor.WhiteBalanceInfo_iROI_bottom_set
    __swig_getmethods__["iROI_bottom"] = _andor.WhiteBalanceInfo_iROI_bottom_get
    if _newclass:iROI_bottom = _swig_property(_andor.WhiteBalanceInfo_iROI_bottom_get, _andor.WhiteBalanceInfo_iROI_bottom_set)
    __swig_setmethods__["iOperation"] = _andor.WhiteBalanceInfo_iOperation_set
    __swig_getmethods__["iOperation"] = _andor.WhiteBalanceInfo_iOperation_get
    if _newclass:iOperation = _swig_property(_andor.WhiteBalanceInfo_iOperation_get, _andor.WhiteBalanceInfo_iOperation_set)
    def __init__(self): 
        this = _andor.new_WhiteBalanceInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _andor.delete_WhiteBalanceInfo
    __del__ = lambda self : None;
WhiteBalanceInfo_swigregister = _andor.WhiteBalanceInfo_swigregister
WhiteBalanceInfo_swigregister(WhiteBalanceInfo)


def AbortAcquisition():
  return _andor.AbortAcquisition()
AbortAcquisition = _andor.AbortAcquisition

def CancelWait():
  return _andor.CancelWait()
CancelWait = _andor.CancelWait

def CoolerOFF():
  return _andor.CoolerOFF()
CoolerOFF = _andor.CoolerOFF

def CoolerON():
  return _andor.CoolerON()
CoolerON = _andor.CoolerON

def DemosaicImage(*args):
  return _andor.DemosaicImage(*args)
DemosaicImage = _andor.DemosaicImage

def EnableKeepCleans(*args):
  return _andor.EnableKeepCleans(*args)
EnableKeepCleans = _andor.EnableKeepCleans

def EnableSensorCompensation(*args):
  return _andor.EnableSensorCompensation(*args)
EnableSensorCompensation = _andor.EnableSensorCompensation

def SetIRIGModulation(*args):
  return _andor.SetIRIGModulation(*args)
SetIRIGModulation = _andor.SetIRIGModulation

def FreeInternalMemory():
  return _andor.FreeInternalMemory()
FreeInternalMemory = _andor.FreeInternalMemory

def GetAcquiredData(*args):
  return _andor.GetAcquiredData(*args)
GetAcquiredData = _andor.GetAcquiredData

def GetAcquiredData16(*args):
  return _andor.GetAcquiredData16(*args)
GetAcquiredData16 = _andor.GetAcquiredData16

def GetAcquiredFloatData(*args):
  return _andor.GetAcquiredFloatData(*args)
GetAcquiredFloatData = _andor.GetAcquiredFloatData

def GetAcquisitionProgress():
  return _andor.GetAcquisitionProgress()
GetAcquisitionProgress = _andor.GetAcquisitionProgress

def GetAcquisitionTimings():
  return _andor.GetAcquisitionTimings()
GetAcquisitionTimings = _andor.GetAcquisitionTimings

def GetAdjustedRingExposureTimes(*args):
  return _andor.GetAdjustedRingExposureTimes(*args)
GetAdjustedRingExposureTimes = _andor.GetAdjustedRingExposureTimes

def GetAllDMAData(*args):
  return _andor.GetAllDMAData(*args)
GetAllDMAData = _andor.GetAllDMAData

def GetAmpDesc(*args):
  return _andor.GetAmpDesc(*args)
GetAmpDesc = _andor.GetAmpDesc

def GetAmpMaxSpeed(*args):
  return _andor.GetAmpMaxSpeed(*args)
GetAmpMaxSpeed = _andor.GetAmpMaxSpeed

def GetAvailableCameras():
  return _andor.GetAvailableCameras()
GetAvailableCameras = _andor.GetAvailableCameras

def GetBackground(*args):
  return _andor.GetBackground(*args)
GetBackground = _andor.GetBackground

def GetBaselineClamp(*args):
  return _andor.GetBaselineClamp(*args)
GetBaselineClamp = _andor.GetBaselineClamp

def GetBitDepth(*args):
  return _andor.GetBitDepth(*args)
GetBitDepth = _andor.GetBitDepth

def GetCameraHandle(*args):
  return _andor.GetCameraHandle(*args)
GetCameraHandle = _andor.GetCameraHandle

def GetCameraInformation(*args):
  return _andor.GetCameraInformation(*args)
GetCameraInformation = _andor.GetCameraInformation

def GetCameraSerialNumber():
  return _andor.GetCameraSerialNumber()
GetCameraSerialNumber = _andor.GetCameraSerialNumber

def GetCapabilities(*args):
  return _andor.GetCapabilities(*args)
GetCapabilities = _andor.GetCapabilities

def GetControllerCardModel(*args):
  return _andor.GetControllerCardModel(*args)
GetControllerCardModel = _andor.GetControllerCardModel

def GetCountConvertWavelengthRange(*args):
  return _andor.GetCountConvertWavelengthRange(*args)
GetCountConvertWavelengthRange = _andor.GetCountConvertWavelengthRange

def GetCurrentCamera():
  return _andor.GetCurrentCamera()
GetCurrentCamera = _andor.GetCurrentCamera

def GetCYMGShift(*args):
  return _andor.GetCYMGShift(*args)
GetCYMGShift = _andor.GetCYMGShift

def GetDDGExternalOutputEnabled(*args):
  return _andor.GetDDGExternalOutputEnabled(*args)
GetDDGExternalOutputEnabled = _andor.GetDDGExternalOutputEnabled

def GetDDGExternalOutputPolarity(*args):
  return _andor.GetDDGExternalOutputPolarity(*args)
GetDDGExternalOutputPolarity = _andor.GetDDGExternalOutputPolarity

def GetDDGExternalOutputStepEnabled(*args):
  return _andor.GetDDGExternalOutputStepEnabled(*args)
GetDDGExternalOutputStepEnabled = _andor.GetDDGExternalOutputStepEnabled

def GetDDGExternalOutputTime(*args):
  return _andor.GetDDGExternalOutputTime(*args)
GetDDGExternalOutputTime = _andor.GetDDGExternalOutputTime

def GetDDGTTLGateWidth(*args):
  return _andor.GetDDGTTLGateWidth(*args)
GetDDGTTLGateWidth = _andor.GetDDGTTLGateWidth

def GetDDGGateTime(*args):
  return _andor.GetDDGGateTime(*args)
GetDDGGateTime = _andor.GetDDGGateTime

def GetDDGInsertionDelay(*args):
  return _andor.GetDDGInsertionDelay(*args)
GetDDGInsertionDelay = _andor.GetDDGInsertionDelay

def GetDDGIntelligate(*args):
  return _andor.GetDDGIntelligate(*args)
GetDDGIntelligate = _andor.GetDDGIntelligate

def GetDDGIOC(*args):
  return _andor.GetDDGIOC(*args)
GetDDGIOC = _andor.GetDDGIOC

def GetDDGIOCFrequency(*args):
  return _andor.GetDDGIOCFrequency(*args)
GetDDGIOCFrequency = _andor.GetDDGIOCFrequency

def GetDDGIOCNumber(*args):
  return _andor.GetDDGIOCNumber(*args)
GetDDGIOCNumber = _andor.GetDDGIOCNumber

def GetDDGIOCNumberRequested(*args):
  return _andor.GetDDGIOCNumberRequested(*args)
GetDDGIOCNumberRequested = _andor.GetDDGIOCNumberRequested

def GetDDGIOCPeriod(*args):
  return _andor.GetDDGIOCPeriod(*args)
GetDDGIOCPeriod = _andor.GetDDGIOCPeriod

def GetDDGIOCPulses(*args):
  return _andor.GetDDGIOCPulses(*args)
GetDDGIOCPulses = _andor.GetDDGIOCPulses

def GetDDGIOCTrigger(*args):
  return _andor.GetDDGIOCTrigger(*args)
GetDDGIOCTrigger = _andor.GetDDGIOCTrigger

def GetDDGOpticalWidthEnabled(*args):
  return _andor.GetDDGOpticalWidthEnabled(*args)
GetDDGOpticalWidthEnabled = _andor.GetDDGOpticalWidthEnabled

def GetDDGLiteGlobalControlByte(*args):
  return _andor.GetDDGLiteGlobalControlByte(*args)
GetDDGLiteGlobalControlByte = _andor.GetDDGLiteGlobalControlByte

def GetDDGLiteControlByte(*args):
  return _andor.GetDDGLiteControlByte(*args)
GetDDGLiteControlByte = _andor.GetDDGLiteControlByte

def GetDDGLiteInitialDelay(*args):
  return _andor.GetDDGLiteInitialDelay(*args)
GetDDGLiteInitialDelay = _andor.GetDDGLiteInitialDelay

def GetDDGLitePulseWidth(*args):
  return _andor.GetDDGLitePulseWidth(*args)
GetDDGLitePulseWidth = _andor.GetDDGLitePulseWidth

def GetDDGLiteInterPulseDelay(*args):
  return _andor.GetDDGLiteInterPulseDelay(*args)
GetDDGLiteInterPulseDelay = _andor.GetDDGLiteInterPulseDelay

def GetDDGLitePulsesPerExposure(*args):
  return _andor.GetDDGLitePulsesPerExposure(*args)
GetDDGLitePulsesPerExposure = _andor.GetDDGLitePulsesPerExposure

def GetDDGPulse(*args):
  return _andor.GetDDGPulse(*args)
GetDDGPulse = _andor.GetDDGPulse

def GetDDGStepCoefficients(*args):
  return _andor.GetDDGStepCoefficients(*args)
GetDDGStepCoefficients = _andor.GetDDGStepCoefficients

def GetDDGWidthStepCoefficients(*args):
  return _andor.GetDDGWidthStepCoefficients(*args)
GetDDGWidthStepCoefficients = _andor.GetDDGWidthStepCoefficients

def GetDDGStepMode(*args):
  return _andor.GetDDGStepMode(*args)
GetDDGStepMode = _andor.GetDDGStepMode

def GetDDGWidthStepMode(*args):
  return _andor.GetDDGWidthStepMode(*args)
GetDDGWidthStepMode = _andor.GetDDGWidthStepMode

def GetDetector():
  return _andor.GetDetector()
GetDetector = _andor.GetDetector

def GetDICameraInfo(*args):
  return _andor.GetDICameraInfo(*args)
GetDICameraInfo = _andor.GetDICameraInfo

def GetEMAdvanced(*args):
  return _andor.GetEMAdvanced(*args)
GetEMAdvanced = _andor.GetEMAdvanced

def GetEMCCDGain(*args):
  return _andor.GetEMCCDGain(*args)
GetEMCCDGain = _andor.GetEMCCDGain

def GetEMGainRange(*args):
  return _andor.GetEMGainRange(*args)
GetEMGainRange = _andor.GetEMGainRange

def GetExternalTriggerTermination(*args):
  return _andor.GetExternalTriggerTermination(*args)
GetExternalTriggerTermination = _andor.GetExternalTriggerTermination

def GetFastestRecommendedVSSpeed(*args):
  return _andor.GetFastestRecommendedVSSpeed(*args)
GetFastestRecommendedVSSpeed = _andor.GetFastestRecommendedVSSpeed

def GetFIFOUsage(*args):
  return _andor.GetFIFOUsage(*args)
GetFIFOUsage = _andor.GetFIFOUsage

def GetFilterMode(*args):
  return _andor.GetFilterMode(*args)
GetFilterMode = _andor.GetFilterMode

def GetFKExposureTime(*args):
  return _andor.GetFKExposureTime(*args)
GetFKExposureTime = _andor.GetFKExposureTime

def GetFKVShiftSpeed(*args):
  return _andor.GetFKVShiftSpeed(*args)
GetFKVShiftSpeed = _andor.GetFKVShiftSpeed

def GetFKVShiftSpeedF(*args):
  return _andor.GetFKVShiftSpeedF(*args)
GetFKVShiftSpeedF = _andor.GetFKVShiftSpeedF

def GetFrontEndStatus(*args):
  return _andor.GetFrontEndStatus(*args)
GetFrontEndStatus = _andor.GetFrontEndStatus

def GetGateMode(*args):
  return _andor.GetGateMode(*args)
GetGateMode = _andor.GetGateMode

def GetHardwareVersion(*args):
  return _andor.GetHardwareVersion(*args)
GetHardwareVersion = _andor.GetHardwareVersion

def GetHeadModel(*args):
  return _andor.GetHeadModel(*args)
GetHeadModel = _andor.GetHeadModel

def GetHorizontalSpeed(*args):
  return _andor.GetHorizontalSpeed(*args)
GetHorizontalSpeed = _andor.GetHorizontalSpeed

def GetHSSpeed(*args):
  return _andor.GetHSSpeed(*args)
GetHSSpeed = _andor.GetHSSpeed

def GetHVflag(*args):
  return _andor.GetHVflag(*args)
GetHVflag = _andor.GetHVflag

def GetID(*args):
  return _andor.GetID(*args)
GetID = _andor.GetID

def GetImageFlip(*args):
  return _andor.GetImageFlip(*args)
GetImageFlip = _andor.GetImageFlip

def GetImageRotate(*args):
  return _andor.GetImageRotate(*args)
GetImageRotate = _andor.GetImageRotate

def GetImages(*args):
  return _andor.GetImages(*args)
GetImages = _andor.GetImages

def GetImages16(*args):
  return _andor.GetImages16(*args)
GetImages16 = _andor.GetImages16

def GetImagesPerDMA(*args):
  return _andor.GetImagesPerDMA(*args)
GetImagesPerDMA = _andor.GetImagesPerDMA

def GetIRQ(*args):
  return _andor.GetIRQ(*args)
GetIRQ = _andor.GetIRQ

def GetKeepCleanTime(*args):
  return _andor.GetKeepCleanTime(*args)
GetKeepCleanTime = _andor.GetKeepCleanTime

def GetMaximumBinning(*args):
  return _andor.GetMaximumBinning(*args)
GetMaximumBinning = _andor.GetMaximumBinning

def GetMaximumExposure(*args):
  return _andor.GetMaximumExposure(*args)
GetMaximumExposure = _andor.GetMaximumExposure

def GetMaximumNumberRingExposureTimes():
  return _andor.GetMaximumNumberRingExposureTimes()
GetMaximumNumberRingExposureTimes = _andor.GetMaximumNumberRingExposureTimes

def GetMCPGain(*args):
  return _andor.GetMCPGain(*args)
GetMCPGain = _andor.GetMCPGain

def GetMCPGainRange(*args):
  return _andor.GetMCPGainRange(*args)
GetMCPGainRange = _andor.GetMCPGainRange

def GetMCPGainTable(*args):
  return _andor.GetMCPGainTable(*args)
GetMCPGainTable = _andor.GetMCPGainTable

def GetMCPVoltage(*args):
  return _andor.GetMCPVoltage(*args)
GetMCPVoltage = _andor.GetMCPVoltage

def GetMinimumImageLength(*args):
  return _andor.GetMinimumImageLength(*args)
GetMinimumImageLength = _andor.GetMinimumImageLength

def GetMinimumNumberInSeries():
  return _andor.GetMinimumNumberInSeries()
GetMinimumNumberInSeries = _andor.GetMinimumNumberInSeries

def GetMostRecentColorImage16(*args):
  return _andor.GetMostRecentColorImage16(*args)
GetMostRecentColorImage16 = _andor.GetMostRecentColorImage16

def GetMostRecentImage(*args):
  return _andor.GetMostRecentImage(*args)
GetMostRecentImage = _andor.GetMostRecentImage

def GetMostRecentImage16(*args):
  return _andor.GetMostRecentImage16(*args)
GetMostRecentImage16 = _andor.GetMostRecentImage16

def GetMetaDataInfo(*args):
  return _andor.GetMetaDataInfo(*args)
GetMetaDataInfo = _andor.GetMetaDataInfo

def GetMSTimingsEnabled():
  return _andor.GetMSTimingsEnabled()
GetMSTimingsEnabled = _andor.GetMSTimingsEnabled

def GetNewData(*args):
  return _andor.GetNewData(*args)
GetNewData = _andor.GetNewData

def GetNewData16(*args):
  return _andor.GetNewData16(*args)
GetNewData16 = _andor.GetNewData16

def GetNewFloatData(*args):
  return _andor.GetNewFloatData(*args)
GetNewFloatData = _andor.GetNewFloatData

def GetNumberADChannels(*args):
  return _andor.GetNumberADChannels(*args)
GetNumberADChannels = _andor.GetNumberADChannels

def GetNumberAmp(*args):
  return _andor.GetNumberAmp(*args)
GetNumberAmp = _andor.GetNumberAmp

def GetNumberAvailableImages(*args):
  return _andor.GetNumberAvailableImages(*args)
GetNumberAvailableImages = _andor.GetNumberAvailableImages

def GetNumberDDGExternalOutputs(*args):
  return _andor.GetNumberDDGExternalOutputs(*args)
GetNumberDDGExternalOutputs = _andor.GetNumberDDGExternalOutputs

def GetNumberDevices(*args):
  return _andor.GetNumberDevices(*args)
GetNumberDevices = _andor.GetNumberDevices

def GetNumberFKVShiftSpeeds():
  return _andor.GetNumberFKVShiftSpeeds()
GetNumberFKVShiftSpeeds = _andor.GetNumberFKVShiftSpeeds

def GetNumberHorizontalSpeeds():
  return _andor.GetNumberHorizontalSpeeds()
GetNumberHorizontalSpeeds = _andor.GetNumberHorizontalSpeeds

def GetNumberHSSpeeds(*args):
  return _andor.GetNumberHSSpeeds(*args)
GetNumberHSSpeeds = _andor.GetNumberHSSpeeds

def GetNumberMissedExternalTriggers(*args):
  return _andor.GetNumberMissedExternalTriggers(*args)
GetNumberMissedExternalTriggers = _andor.GetNumberMissedExternalTriggers

def GetIRIGData(*args):
  return _andor.GetIRIGData(*args)
GetIRIGData = _andor.GetIRIGData

def GetNumberNewImages(*args):
  return _andor.GetNumberNewImages(*args)
GetNumberNewImages = _andor.GetNumberNewImages

def GetNumberPhotonCountingDivisions(*args):
  return _andor.GetNumberPhotonCountingDivisions(*args)
GetNumberPhotonCountingDivisions = _andor.GetNumberPhotonCountingDivisions

def GetNumberPreAmpGains(*args):
  return _andor.GetNumberPreAmpGains(*args)
GetNumberPreAmpGains = _andor.GetNumberPreAmpGains

def GetNumberRingExposureTimes(*args):
  return _andor.GetNumberRingExposureTimes(*args)
GetNumberRingExposureTimes = _andor.GetNumberRingExposureTimes

def GetNumberIO(*args):
  return _andor.GetNumberIO(*args)
GetNumberIO = _andor.GetNumberIO

def GetNumberVerticalSpeeds():
  return _andor.GetNumberVerticalSpeeds()
GetNumberVerticalSpeeds = _andor.GetNumberVerticalSpeeds

def GetNumberVSAmplitudes():
  return _andor.GetNumberVSAmplitudes()
GetNumberVSAmplitudes = _andor.GetNumberVSAmplitudes

def GetNumberVSSpeeds():
  return _andor.GetNumberVSSpeeds()
GetNumberVSSpeeds = _andor.GetNumberVSSpeeds

def GetOldestImage(*args):
  return _andor.GetOldestImage(*args)
GetOldestImage = _andor.GetOldestImage

def GetOldestImage16(*args):
  return _andor.GetOldestImage16(*args)
GetOldestImage16 = _andor.GetOldestImage16

def GetPhosphorStatus(*args):
  return _andor.GetPhosphorStatus(*args)
GetPhosphorStatus = _andor.GetPhosphorStatus

def GetPhysicalDMAAddress(*args):
  return _andor.GetPhysicalDMAAddress(*args)
GetPhysicalDMAAddress = _andor.GetPhysicalDMAAddress

def GetPixelSize(*args):
  return _andor.GetPixelSize(*args)
GetPixelSize = _andor.GetPixelSize

def GetPreAmpGain(*args):
  return _andor.GetPreAmpGain(*args)
GetPreAmpGain = _andor.GetPreAmpGain

def GetPreAmpGainText(*args):
  return _andor.GetPreAmpGainText(*args)
GetPreAmpGainText = _andor.GetPreAmpGainText

def GetDualExposureTimes(*args):
  return _andor.GetDualExposureTimes(*args)
GetDualExposureTimes = _andor.GetDualExposureTimes

def GetQE(*args):
  return _andor.GetQE(*args)
GetQE = _andor.GetQE

def GetReadOutTime(*args):
  return _andor.GetReadOutTime(*args)
GetReadOutTime = _andor.GetReadOutTime

def GetRegisterDump(*args):
  return _andor.GetRegisterDump(*args)
GetRegisterDump = _andor.GetRegisterDump

def GetRelativeImageTimes(*args):
  return _andor.GetRelativeImageTimes(*args)
GetRelativeImageTimes = _andor.GetRelativeImageTimes

def GetRingExposureRange(*args):
  return _andor.GetRingExposureRange(*args)
GetRingExposureRange = _andor.GetRingExposureRange

def GetSDK3Handle(*args):
  return _andor.GetSDK3Handle(*args)
GetSDK3Handle = _andor.GetSDK3Handle

def GetSensitivity(*args):
  return _andor.GetSensitivity(*args)
GetSensitivity = _andor.GetSensitivity

def GetShutterMinTimes(*args):
  return _andor.GetShutterMinTimes(*args)
GetShutterMinTimes = _andor.GetShutterMinTimes

def GetSizeOfCircularBuffer(*args):
  return _andor.GetSizeOfCircularBuffer(*args)
GetSizeOfCircularBuffer = _andor.GetSizeOfCircularBuffer

def GetSlotBusDeviceFunction(*args):
  return _andor.GetSlotBusDeviceFunction(*args)
GetSlotBusDeviceFunction = _andor.GetSlotBusDeviceFunction

def GetSoftwareVersion(*args):
  return _andor.GetSoftwareVersion(*args)
GetSoftwareVersion = _andor.GetSoftwareVersion

def GetSpoolProgress(*args):
  return _andor.GetSpoolProgress(*args)
GetSpoolProgress = _andor.GetSpoolProgress

def GetStartUpTime(*args):
  return _andor.GetStartUpTime(*args)
GetStartUpTime = _andor.GetStartUpTime

def GetStatus():
  return _andor.GetStatus()
GetStatus = _andor.GetStatus

def GetTECStatus(*args):
  return _andor.GetTECStatus(*args)
GetTECStatus = _andor.GetTECStatus

def GetTemperature():
  return _andor.GetTemperature()
GetTemperature = _andor.GetTemperature

def GetTemperatureF():
  return _andor.GetTemperatureF()
GetTemperatureF = _andor.GetTemperatureF

def GetTemperatureRange(*args):
  return _andor.GetTemperatureRange(*args)
GetTemperatureRange = _andor.GetTemperatureRange

def GetTemperaturePrecision(*args):
  return _andor.GetTemperaturePrecision(*args)
GetTemperaturePrecision = _andor.GetTemperaturePrecision

def GetTemperatureStatus():
  return _andor.GetTemperatureStatus()
GetTemperatureStatus = _andor.GetTemperatureStatus

def GetTotalNumberImagesAcquired(*args):
  return _andor.GetTotalNumberImagesAcquired(*args)
GetTotalNumberImagesAcquired = _andor.GetTotalNumberImagesAcquired

def GetIODirection(*args):
  return _andor.GetIODirection(*args)
GetIODirection = _andor.GetIODirection

def GetIOLevel(*args):
  return _andor.GetIOLevel(*args)
GetIOLevel = _andor.GetIOLevel

def GetUSBDeviceDetails(*args):
  return _andor.GetUSBDeviceDetails(*args)
GetUSBDeviceDetails = _andor.GetUSBDeviceDetails

def GetVersionInfo(*args):
  return _andor.GetVersionInfo(*args)
GetVersionInfo = _andor.GetVersionInfo

def GetVerticalSpeed(*args):
  return _andor.GetVerticalSpeed(*args)
GetVerticalSpeed = _andor.GetVerticalSpeed

def GetVirtualDMAAddress(*args):
  return _andor.GetVirtualDMAAddress(*args)
GetVirtualDMAAddress = _andor.GetVirtualDMAAddress

def GetVSAmplitudeString(*args):
  return _andor.GetVSAmplitudeString(*args)
GetVSAmplitudeString = _andor.GetVSAmplitudeString

def GetVSAmplitudeFromString(*args):
  return _andor.GetVSAmplitudeFromString(*args)
GetVSAmplitudeFromString = _andor.GetVSAmplitudeFromString

def GetVSAmplitudeValue(*args):
  return _andor.GetVSAmplitudeValue(*args)
GetVSAmplitudeValue = _andor.GetVSAmplitudeValue

def GetVSSpeed(*args):
  return _andor.GetVSSpeed(*args)
GetVSSpeed = _andor.GetVSSpeed

def GPIBReceive(*args):
  return _andor.GPIBReceive(*args)
GPIBReceive = _andor.GPIBReceive

def GPIBSend(*args):
  return _andor.GPIBSend(*args)
GPIBSend = _andor.GPIBSend

def I2CBurstRead(*args):
  return _andor.I2CBurstRead(*args)
I2CBurstRead = _andor.I2CBurstRead

def I2CBurstWrite(*args):
  return _andor.I2CBurstWrite(*args)
I2CBurstWrite = _andor.I2CBurstWrite

def I2CRead(*args):
  return _andor.I2CRead(*args)
I2CRead = _andor.I2CRead

def I2CReset():
  return _andor.I2CReset()
I2CReset = _andor.I2CReset

def I2CWrite(*args):
  return _andor.I2CWrite(*args)
I2CWrite = _andor.I2CWrite

def IdAndorDll():
  return _andor.IdAndorDll()
IdAndorDll = _andor.IdAndorDll

def InAuxPort(*args):
  return _andor.InAuxPort(*args)
InAuxPort = _andor.InAuxPort

def Initialize(*args):
  return _andor.Initialize(*args)
Initialize = _andor.Initialize

def InitializeDevice(*args):
  return _andor.InitializeDevice(*args)
InitializeDevice = _andor.InitializeDevice

def IsAmplifierAvailable(*args):
  return _andor.IsAmplifierAvailable(*args)
IsAmplifierAvailable = _andor.IsAmplifierAvailable

def IsCoolerOn(*args):
  return _andor.IsCoolerOn(*args)
IsCoolerOn = _andor.IsCoolerOn

def IsCountConvertModeAvailable(*args):
  return _andor.IsCountConvertModeAvailable(*args)
IsCountConvertModeAvailable = _andor.IsCountConvertModeAvailable

def IsInternalMechanicalShutter(*args):
  return _andor.IsInternalMechanicalShutter(*args)
IsInternalMechanicalShutter = _andor.IsInternalMechanicalShutter

def IsPreAmpGainAvailable(*args):
  return _andor.IsPreAmpGainAvailable(*args)
IsPreAmpGainAvailable = _andor.IsPreAmpGainAvailable

def IsReadoutFlippedByAmplifier(*args):
  return _andor.IsReadoutFlippedByAmplifier(*args)
IsReadoutFlippedByAmplifier = _andor.IsReadoutFlippedByAmplifier

def IsTriggerModeAvailable(*args):
  return _andor.IsTriggerModeAvailable(*args)
IsTriggerModeAvailable = _andor.IsTriggerModeAvailable

def Merge(*args):
  return _andor.Merge(*args)
Merge = _andor.Merge

def OutAuxPort(*args):
  return _andor.OutAuxPort(*args)
OutAuxPort = _andor.OutAuxPort

def PrepareAcquisition():
  return _andor.PrepareAcquisition()
PrepareAcquisition = _andor.PrepareAcquisition

def SaveAsBmp(*args):
  return _andor.SaveAsBmp(*args)
SaveAsBmp = _andor.SaveAsBmp

def SaveAsCommentedSif(*args):
  return _andor.SaveAsCommentedSif(*args)
SaveAsCommentedSif = _andor.SaveAsCommentedSif

def SaveAsEDF(*args):
  return _andor.SaveAsEDF(*args)
SaveAsEDF = _andor.SaveAsEDF

def SaveAsFITS(*args):
  return _andor.SaveAsFITS(*args)
SaveAsFITS = _andor.SaveAsFITS

def SaveAsRaw(*args):
  return _andor.SaveAsRaw(*args)
SaveAsRaw = _andor.SaveAsRaw

def SaveAsSif(*args):
  return _andor.SaveAsSif(*args)
SaveAsSif = _andor.SaveAsSif

def SaveAsTiff(*args):
  return _andor.SaveAsTiff(*args)
SaveAsTiff = _andor.SaveAsTiff

def SaveAsTiffEx(*args):
  return _andor.SaveAsTiffEx(*args)
SaveAsTiffEx = _andor.SaveAsTiffEx

def SaveEEPROMToFile(*args):
  return _andor.SaveEEPROMToFile(*args)
SaveEEPROMToFile = _andor.SaveEEPROMToFile

def SaveToClipBoard(*args):
  return _andor.SaveToClipBoard(*args)
SaveToClipBoard = _andor.SaveToClipBoard

def SelectDevice(*args):
  return _andor.SelectDevice(*args)
SelectDevice = _andor.SelectDevice

def SendSoftwareTrigger():
  return _andor.SendSoftwareTrigger()
SendSoftwareTrigger = _andor.SendSoftwareTrigger

def SetAccumulationCycleTime(*args):
  return _andor.SetAccumulationCycleTime(*args)
SetAccumulationCycleTime = _andor.SetAccumulationCycleTime

def SetAcquisitionMode(*args):
  return _andor.SetAcquisitionMode(*args)
SetAcquisitionMode = _andor.SetAcquisitionMode

def SetSensorPortMode(*args):
  return _andor.SetSensorPortMode(*args)
SetSensorPortMode = _andor.SetSensorPortMode

def SelectSensorPort(*args):
  return _andor.SelectSensorPort(*args)
SelectSensorPort = _andor.SelectSensorPort

def SetAcquisitionType(*args):
  return _andor.SetAcquisitionType(*args)
SetAcquisitionType = _andor.SetAcquisitionType

def SetADChannel(*args):
  return _andor.SetADChannel(*args)
SetADChannel = _andor.SetADChannel

def SetAdvancedTriggerModeState(*args):
  return _andor.SetAdvancedTriggerModeState(*args)
SetAdvancedTriggerModeState = _andor.SetAdvancedTriggerModeState

def SetBackground(*args):
  return _andor.SetBackground(*args)
SetBackground = _andor.SetBackground

def SetBaselineClamp(*args):
  return _andor.SetBaselineClamp(*args)
SetBaselineClamp = _andor.SetBaselineClamp

def SetBaselineOffset(*args):
  return _andor.SetBaselineOffset(*args)
SetBaselineOffset = _andor.SetBaselineOffset

def SetCameraLinkMode(*args):
  return _andor.SetCameraLinkMode(*args)
SetCameraLinkMode = _andor.SetCameraLinkMode

def SetCameraStatusEnable(*args):
  return _andor.SetCameraStatusEnable(*args)
SetCameraStatusEnable = _andor.SetCameraStatusEnable

def SetChargeShifting(*args):
  return _andor.SetChargeShifting(*args)
SetChargeShifting = _andor.SetChargeShifting

def SetComplexImage(*args):
  return _andor.SetComplexImage(*args)
SetComplexImage = _andor.SetComplexImage

def SetCoolerMode(*args):
  return _andor.SetCoolerMode(*args)
SetCoolerMode = _andor.SetCoolerMode

def SetCountConvertMode(*args):
  return _andor.SetCountConvertMode(*args)
SetCountConvertMode = _andor.SetCountConvertMode

def SetCountConvertWavelength(*args):
  return _andor.SetCountConvertWavelength(*args)
SetCountConvertWavelength = _andor.SetCountConvertWavelength

def SetCropMode(*args):
  return _andor.SetCropMode(*args)
SetCropMode = _andor.SetCropMode

def SetCurrentCamera(*args):
  return _andor.SetCurrentCamera(*args)
SetCurrentCamera = _andor.SetCurrentCamera

def SetCustomTrackHBin(*args):
  return _andor.SetCustomTrackHBin(*args)
SetCustomTrackHBin = _andor.SetCustomTrackHBin

def SetDataType(*args):
  return _andor.SetDataType(*args)
SetDataType = _andor.SetDataType

def SetDACOutput(*args):
  return _andor.SetDACOutput(*args)
SetDACOutput = _andor.SetDACOutput

def SetDACOutputScale(*args):
  return _andor.SetDACOutputScale(*args)
SetDACOutputScale = _andor.SetDACOutputScale

def SetDDGAddress(*args):
  return _andor.SetDDGAddress(*args)
SetDDGAddress = _andor.SetDDGAddress

def SetDDGExternalOutputEnabled(*args):
  return _andor.SetDDGExternalOutputEnabled(*args)
SetDDGExternalOutputEnabled = _andor.SetDDGExternalOutputEnabled

def SetDDGExternalOutputPolarity(*args):
  return _andor.SetDDGExternalOutputPolarity(*args)
SetDDGExternalOutputPolarity = _andor.SetDDGExternalOutputPolarity

def SetDDGExternalOutputStepEnabled(*args):
  return _andor.SetDDGExternalOutputStepEnabled(*args)
SetDDGExternalOutputStepEnabled = _andor.SetDDGExternalOutputStepEnabled

def SetDDGExternalOutputTime(*args):
  return _andor.SetDDGExternalOutputTime(*args)
SetDDGExternalOutputTime = _andor.SetDDGExternalOutputTime

def SetDDGGain(*args):
  return _andor.SetDDGGain(*args)
SetDDGGain = _andor.SetDDGGain

def SetDDGGateStep(*args):
  return _andor.SetDDGGateStep(*args)
SetDDGGateStep = _andor.SetDDGGateStep

def SetDDGGateTime(*args):
  return _andor.SetDDGGateTime(*args)
SetDDGGateTime = _andor.SetDDGGateTime

def SetDDGInsertionDelay(*args):
  return _andor.SetDDGInsertionDelay(*args)
SetDDGInsertionDelay = _andor.SetDDGInsertionDelay

def SetDDGIntelligate(*args):
  return _andor.SetDDGIntelligate(*args)
SetDDGIntelligate = _andor.SetDDGIntelligate

def SetDDGIOC(*args):
  return _andor.SetDDGIOC(*args)
SetDDGIOC = _andor.SetDDGIOC

def SetDDGIOCFrequency(*args):
  return _andor.SetDDGIOCFrequency(*args)
SetDDGIOCFrequency = _andor.SetDDGIOCFrequency

def SetDDGIOCNumber(*args):
  return _andor.SetDDGIOCNumber(*args)
SetDDGIOCNumber = _andor.SetDDGIOCNumber

def SetDDGIOCPeriod(*args):
  return _andor.SetDDGIOCPeriod(*args)
SetDDGIOCPeriod = _andor.SetDDGIOCPeriod

def SetDDGIOCTrigger(*args):
  return _andor.SetDDGIOCTrigger(*args)
SetDDGIOCTrigger = _andor.SetDDGIOCTrigger

def SetDDGOpticalWidthEnabled(*args):
  return _andor.SetDDGOpticalWidthEnabled(*args)
SetDDGOpticalWidthEnabled = _andor.SetDDGOpticalWidthEnabled

def SetDDGLiteGlobalControlByte(*args):
  return _andor.SetDDGLiteGlobalControlByte(*args)
SetDDGLiteGlobalControlByte = _andor.SetDDGLiteGlobalControlByte

def SetDDGLiteControlByte(*args):
  return _andor.SetDDGLiteControlByte(*args)
SetDDGLiteControlByte = _andor.SetDDGLiteControlByte

def SetDDGLiteInitialDelay(*args):
  return _andor.SetDDGLiteInitialDelay(*args)
SetDDGLiteInitialDelay = _andor.SetDDGLiteInitialDelay

def SetDDGLitePulseWidth(*args):
  return _andor.SetDDGLitePulseWidth(*args)
SetDDGLitePulseWidth = _andor.SetDDGLitePulseWidth

def SetDDGLiteInterPulseDelay(*args):
  return _andor.SetDDGLiteInterPulseDelay(*args)
SetDDGLiteInterPulseDelay = _andor.SetDDGLiteInterPulseDelay

def SetDDGLitePulsesPerExposure(*args):
  return _andor.SetDDGLitePulsesPerExposure(*args)
SetDDGLitePulsesPerExposure = _andor.SetDDGLitePulsesPerExposure

def SetDDGStepCoefficients(*args):
  return _andor.SetDDGStepCoefficients(*args)
SetDDGStepCoefficients = _andor.SetDDGStepCoefficients

def SetDDGWidthStepCoefficients(*args):
  return _andor.SetDDGWidthStepCoefficients(*args)
SetDDGWidthStepCoefficients = _andor.SetDDGWidthStepCoefficients

def SetDDGStepMode(*args):
  return _andor.SetDDGStepMode(*args)
SetDDGStepMode = _andor.SetDDGStepMode

def SetDDGWidthStepMode(*args):
  return _andor.SetDDGWidthStepMode(*args)
SetDDGWidthStepMode = _andor.SetDDGWidthStepMode

def SetDDGTimes(*args):
  return _andor.SetDDGTimes(*args)
SetDDGTimes = _andor.SetDDGTimes

def SetDDGTriggerMode(*args):
  return _andor.SetDDGTriggerMode(*args)
SetDDGTriggerMode = _andor.SetDDGTriggerMode

def SetDDGVariableGateStep(*args):
  return _andor.SetDDGVariableGateStep(*args)
SetDDGVariableGateStep = _andor.SetDDGVariableGateStep

def SetDelayGenerator(*args):
  return _andor.SetDelayGenerator(*args)
SetDelayGenerator = _andor.SetDelayGenerator

def SetDMAParameters(*args):
  return _andor.SetDMAParameters(*args)
SetDMAParameters = _andor.SetDMAParameters

def SetEMAdvanced(*args):
  return _andor.SetEMAdvanced(*args)
SetEMAdvanced = _andor.SetEMAdvanced

def SetEMCCDGain(*args):
  return _andor.SetEMCCDGain(*args)
SetEMCCDGain = _andor.SetEMCCDGain

def SetEMClockCompensation(*args):
  return _andor.SetEMClockCompensation(*args)
SetEMClockCompensation = _andor.SetEMClockCompensation

def SetEMGainMode(*args):
  return _andor.SetEMGainMode(*args)
SetEMGainMode = _andor.SetEMGainMode

def SetExposureTime(*args):
  return _andor.SetExposureTime(*args)
SetExposureTime = _andor.SetExposureTime

def SetExternalTriggerTermination(*args):
  return _andor.SetExternalTriggerTermination(*args)
SetExternalTriggerTermination = _andor.SetExternalTriggerTermination

def SetFanMode(*args):
  return _andor.SetFanMode(*args)
SetFanMode = _andor.SetFanMode

def SetFastExtTrigger(*args):
  return _andor.SetFastExtTrigger(*args)
SetFastExtTrigger = _andor.SetFastExtTrigger

def SetFastKinetics(*args):
  return _andor.SetFastKinetics(*args)
SetFastKinetics = _andor.SetFastKinetics

def SetFastKineticsEx(*args):
  return _andor.SetFastKineticsEx(*args)
SetFastKineticsEx = _andor.SetFastKineticsEx

def SetSuperKinetics(*args):
  return _andor.SetSuperKinetics(*args)
SetSuperKinetics = _andor.SetSuperKinetics

def SetTimeScan(*args):
  return _andor.SetTimeScan(*args)
SetTimeScan = _andor.SetTimeScan

def SetFilterMode(*args):
  return _andor.SetFilterMode(*args)
SetFilterMode = _andor.SetFilterMode

def SetFilterParameters(*args):
  return _andor.SetFilterParameters(*args)
SetFilterParameters = _andor.SetFilterParameters

def SetFKVShiftSpeed(*args):
  return _andor.SetFKVShiftSpeed(*args)
SetFKVShiftSpeed = _andor.SetFKVShiftSpeed

def SetFPDP(*args):
  return _andor.SetFPDP(*args)
SetFPDP = _andor.SetFPDP

def SetFrameTransferMode(*args):
  return _andor.SetFrameTransferMode(*args)
SetFrameTransferMode = _andor.SetFrameTransferMode

def SetFullImage(*args):
  return _andor.SetFullImage(*args)
SetFullImage = _andor.SetFullImage

def SetFVBHBin(*args):
  return _andor.SetFVBHBin(*args)
SetFVBHBin = _andor.SetFVBHBin

def SetGain(*args):
  return _andor.SetGain(*args)
SetGain = _andor.SetGain

def SetGate(*args):
  return _andor.SetGate(*args)
SetGate = _andor.SetGate

def SetGateMode(*args):
  return _andor.SetGateMode(*args)
SetGateMode = _andor.SetGateMode

def SetHighCapacity(*args):
  return _andor.SetHighCapacity(*args)
SetHighCapacity = _andor.SetHighCapacity

def SetHorizontalSpeed(*args):
  return _andor.SetHorizontalSpeed(*args)
SetHorizontalSpeed = _andor.SetHorizontalSpeed

def SetHSSpeed(*args):
  return _andor.SetHSSpeed(*args)
SetHSSpeed = _andor.SetHSSpeed

def SetImage(*args):
  return _andor.SetImage(*args)
SetImage = _andor.SetImage

def SetImageFlip(*args):
  return _andor.SetImageFlip(*args)
SetImageFlip = _andor.SetImageFlip

def SetImageRotate(*args):
  return _andor.SetImageRotate(*args)
SetImageRotate = _andor.SetImageRotate

def SetIsolatedCropMode(*args):
  return _andor.SetIsolatedCropMode(*args)
SetIsolatedCropMode = _andor.SetIsolatedCropMode

def SetIsolatedCropModeEx(*args):
  return _andor.SetIsolatedCropModeEx(*args)
SetIsolatedCropModeEx = _andor.SetIsolatedCropModeEx

def SetKineticCycleTime(*args):
  return _andor.SetKineticCycleTime(*args)
SetKineticCycleTime = _andor.SetKineticCycleTime

def SetMCPGain(*args):
  return _andor.SetMCPGain(*args)
SetMCPGain = _andor.SetMCPGain

def SetMCPGating(*args):
  return _andor.SetMCPGating(*args)
SetMCPGating = _andor.SetMCPGating

def SetMessageWindow(*args):
  return _andor.SetMessageWindow(*args)
SetMessageWindow = _andor.SetMessageWindow

def SetMetaData(*args):
  return _andor.SetMetaData(*args)
SetMetaData = _andor.SetMetaData

def SetMultiTrack(*args):
  return _andor.SetMultiTrack(*args)
SetMultiTrack = _andor.SetMultiTrack

def SetMultiTrackHBin(*args):
  return _andor.SetMultiTrackHBin(*args)
SetMultiTrackHBin = _andor.SetMultiTrackHBin

def SetMultiTrackHRange(*args):
  return _andor.SetMultiTrackHRange(*args)
SetMultiTrackHRange = _andor.SetMultiTrackHRange

def SetMultiTrackScan(*args):
  return _andor.SetMultiTrackScan(*args)
SetMultiTrackScan = _andor.SetMultiTrackScan

def SetNextAddress(*args):
  return _andor.SetNextAddress(*args)
SetNextAddress = _andor.SetNextAddress

def SetNumberAccumulations(*args):
  return _andor.SetNumberAccumulations(*args)
SetNumberAccumulations = _andor.SetNumberAccumulations

def SetNumberKinetics(*args):
  return _andor.SetNumberKinetics(*args)
SetNumberKinetics = _andor.SetNumberKinetics

def SetNumberPrescans(*args):
  return _andor.SetNumberPrescans(*args)
SetNumberPrescans = _andor.SetNumberPrescans

def SetOutputAmplifier(*args):
  return _andor.SetOutputAmplifier(*args)
SetOutputAmplifier = _andor.SetOutputAmplifier

def SetOverlapMode(*args):
  return _andor.SetOverlapMode(*args)
SetOverlapMode = _andor.SetOverlapMode

def SetPhotonCounting(*args):
  return _andor.SetPhotonCounting(*args)
SetPhotonCounting = _andor.SetPhotonCounting

def SetPhotonCountingThreshold(*args):
  return _andor.SetPhotonCountingThreshold(*args)
SetPhotonCountingThreshold = _andor.SetPhotonCountingThreshold

def SetPhotonCountingDivisions(*args):
  return _andor.SetPhotonCountingDivisions(*args)
SetPhotonCountingDivisions = _andor.SetPhotonCountingDivisions

def SetPixelMode(*args):
  return _andor.SetPixelMode(*args)
SetPixelMode = _andor.SetPixelMode

def SetPreAmpGain(*args):
  return _andor.SetPreAmpGain(*args)
SetPreAmpGain = _andor.SetPreAmpGain

def SetDualExposureTimes(*args):
  return _andor.SetDualExposureTimes(*args)
SetDualExposureTimes = _andor.SetDualExposureTimes

def SetDualExposureMode(*args):
  return _andor.SetDualExposureMode(*args)
SetDualExposureMode = _andor.SetDualExposureMode

def SetRandomTracks(*args):
  return _andor.SetRandomTracks(*args)
SetRandomTracks = _andor.SetRandomTracks

def SetReadMode(*args):
  return _andor.SetReadMode(*args)
SetReadMode = _andor.SetReadMode

def SetReadoutRegisterPacking(*args):
  return _andor.SetReadoutRegisterPacking(*args)
SetReadoutRegisterPacking = _andor.SetReadoutRegisterPacking

def SetRegisterDump(*args):
  return _andor.SetRegisterDump(*args)
SetRegisterDump = _andor.SetRegisterDump

def SetRingExposureTimes(*args):
  return _andor.SetRingExposureTimes(*args)
SetRingExposureTimes = _andor.SetRingExposureTimes

def SetShutter(*args):
  return _andor.SetShutter(*args)
SetShutter = _andor.SetShutter

def SetShutterEx(*args):
  return _andor.SetShutterEx(*args)
SetShutterEx = _andor.SetShutterEx

def SetShutters(*args):
  return _andor.SetShutters(*args)
SetShutters = _andor.SetShutters

def SetSifComment(*args):
  return _andor.SetSifComment(*args)
SetSifComment = _andor.SetSifComment

def SetSingleTrack(*args):
  return _andor.SetSingleTrack(*args)
SetSingleTrack = _andor.SetSingleTrack

def SetSingleTrackHBin(*args):
  return _andor.SetSingleTrackHBin(*args)
SetSingleTrackHBin = _andor.SetSingleTrackHBin

def SetSpool(*args):
  return _andor.SetSpool(*args)
SetSpool = _andor.SetSpool

def SetSpoolThreadCount(*args):
  return _andor.SetSpoolThreadCount(*args)
SetSpoolThreadCount = _andor.SetSpoolThreadCount

def SetStorageMode(*args):
  return _andor.SetStorageMode(*args)
SetStorageMode = _andor.SetStorageMode

def SetTemperature(*args):
  return _andor.SetTemperature(*args)
SetTemperature = _andor.SetTemperature

def SetTriggerMode(*args):
  return _andor.SetTriggerMode(*args)
SetTriggerMode = _andor.SetTriggerMode

def SetTriggerInvert(*args):
  return _andor.SetTriggerInvert(*args)
SetTriggerInvert = _andor.SetTriggerInvert

def GetTriggerLevelRange(*args):
  return _andor.GetTriggerLevelRange(*args)
GetTriggerLevelRange = _andor.GetTriggerLevelRange

def SetTriggerLevel(*args):
  return _andor.SetTriggerLevel(*args)
SetTriggerLevel = _andor.SetTriggerLevel

def SetIODirection(*args):
  return _andor.SetIODirection(*args)
SetIODirection = _andor.SetIODirection

def SetIOLevel(*args):
  return _andor.SetIOLevel(*args)
SetIOLevel = _andor.SetIOLevel

def SetUSGenomics(*args):
  return _andor.SetUSGenomics(*args)
SetUSGenomics = _andor.SetUSGenomics

def SetVerticalRowBuffer(*args):
  return _andor.SetVerticalRowBuffer(*args)
SetVerticalRowBuffer = _andor.SetVerticalRowBuffer

def SetVerticalSpeed(*args):
  return _andor.SetVerticalSpeed(*args)
SetVerticalSpeed = _andor.SetVerticalSpeed

def SetVirtualChip(*args):
  return _andor.SetVirtualChip(*args)
SetVirtualChip = _andor.SetVirtualChip

def SetVSAmplitude(*args):
  return _andor.SetVSAmplitude(*args)
SetVSAmplitude = _andor.SetVSAmplitude

def SetVSSpeed(*args):
  return _andor.SetVSSpeed(*args)
SetVSSpeed = _andor.SetVSSpeed

def ShutDown():
  return _andor.ShutDown()
ShutDown = _andor.ShutDown

def StartAcquisition():
  return _andor.StartAcquisition()
StartAcquisition = _andor.StartAcquisition

def UpdateDDGTimings():
  return _andor.UpdateDDGTimings()
UpdateDDGTimings = _andor.UpdateDDGTimings

def WaitForAcquisition():
  return _andor.WaitForAcquisition()
WaitForAcquisition = _andor.WaitForAcquisition

def WaitForAcquisitionByHandle(*args):
  return _andor.WaitForAcquisitionByHandle(*args)
WaitForAcquisitionByHandle = _andor.WaitForAcquisitionByHandle

def WaitForAcquisitionByHandleTimeOut(*args):
  return _andor.WaitForAcquisitionByHandleTimeOut(*args)
WaitForAcquisitionByHandleTimeOut = _andor.WaitForAcquisitionByHandleTimeOut

def WaitForAcquisitionTimeOut(*args):
  return _andor.WaitForAcquisitionTimeOut(*args)
WaitForAcquisitionTimeOut = _andor.WaitForAcquisitionTimeOut

def WhiteBalance(*args):
  return _andor.WhiteBalance(*args)
WhiteBalance = _andor.WhiteBalance

def OA_Initialize(*args):
  return _andor.OA_Initialize(*args)
OA_Initialize = _andor.OA_Initialize

def OA_EnableMode(*args):
  return _andor.OA_EnableMode(*args)
OA_EnableMode = _andor.OA_EnableMode

def OA_GetModeAcqParams(*args):
  return _andor.OA_GetModeAcqParams(*args)
OA_GetModeAcqParams = _andor.OA_GetModeAcqParams

def OA_GetUserModeNames(*args):
  return _andor.OA_GetUserModeNames(*args)
OA_GetUserModeNames = _andor.OA_GetUserModeNames

def OA_GetPreSetModeNames(*args):
  return _andor.OA_GetPreSetModeNames(*args)
OA_GetPreSetModeNames = _andor.OA_GetPreSetModeNames

def OA_GetNumberOfUserModes(*args):
  return _andor.OA_GetNumberOfUserModes(*args)
OA_GetNumberOfUserModes = _andor.OA_GetNumberOfUserModes

def OA_GetNumberOfPreSetModes(*args):
  return _andor.OA_GetNumberOfPreSetModes(*args)
OA_GetNumberOfPreSetModes = _andor.OA_GetNumberOfPreSetModes

def OA_GetNumberOfAcqParams(*args):
  return _andor.OA_GetNumberOfAcqParams(*args)
OA_GetNumberOfAcqParams = _andor.OA_GetNumberOfAcqParams

def OA_AddMode(*args):
  return _andor.OA_AddMode(*args)
OA_AddMode = _andor.OA_AddMode

def OA_WriteToFile(*args):
  return _andor.OA_WriteToFile(*args)
OA_WriteToFile = _andor.OA_WriteToFile

def OA_DeleteMode(*args):
  return _andor.OA_DeleteMode(*args)
OA_DeleteMode = _andor.OA_DeleteMode

def OA_SetInt(*args):
  return _andor.OA_SetInt(*args)
OA_SetInt = _andor.OA_SetInt

def OA_SetFloat(*args):
  return _andor.OA_SetFloat(*args)
OA_SetFloat = _andor.OA_SetFloat

def OA_SetString(*args):
  return _andor.OA_SetString(*args)
OA_SetString = _andor.OA_SetString

def OA_GetInt(*args):
  return _andor.OA_GetInt(*args)
OA_GetInt = _andor.OA_GetInt

def OA_GetFloat(*args):
  return _andor.OA_GetFloat(*args)
OA_GetFloat = _andor.OA_GetFloat

def OA_GetString(*args):
  return _andor.OA_GetString(*args)
OA_GetString = _andor.OA_GetString

def Filter_SetMode(*args):
  return _andor.Filter_SetMode(*args)
Filter_SetMode = _andor.Filter_SetMode

def Filter_GetMode(*args):
  return _andor.Filter_GetMode(*args)
Filter_GetMode = _andor.Filter_GetMode

def Filter_SetThreshold(*args):
  return _andor.Filter_SetThreshold(*args)
Filter_SetThreshold = _andor.Filter_SetThreshold

def Filter_GetThreshold(*args):
  return _andor.Filter_GetThreshold(*args)
Filter_GetThreshold = _andor.Filter_GetThreshold

def Filter_SetDataAveragingMode(*args):
  return _andor.Filter_SetDataAveragingMode(*args)
Filter_SetDataAveragingMode = _andor.Filter_SetDataAveragingMode

def Filter_GetDataAveragingMode(*args):
  return _andor.Filter_GetDataAveragingMode(*args)
Filter_GetDataAveragingMode = _andor.Filter_GetDataAveragingMode

def Filter_SetAveragingFrameCount(*args):
  return _andor.Filter_SetAveragingFrameCount(*args)
Filter_SetAveragingFrameCount = _andor.Filter_SetAveragingFrameCount

def Filter_GetAveragingFrameCount(*args):
  return _andor.Filter_GetAveragingFrameCount(*args)
Filter_GetAveragingFrameCount = _andor.Filter_GetAveragingFrameCount

def Filter_SetAveragingFactor(*args):
  return _andor.Filter_SetAveragingFactor(*args)
Filter_SetAveragingFactor = _andor.Filter_SetAveragingFactor

def Filter_GetAveragingFactor(*args):
  return _andor.Filter_GetAveragingFactor(*args)
Filter_GetAveragingFactor = _andor.Filter_GetAveragingFactor

def PostProcessNoiseFilter(*args):
  return _andor.PostProcessNoiseFilter(*args)
PostProcessNoiseFilter = _andor.PostProcessNoiseFilter

def PostProcessCountConvert(*args):
  return _andor.PostProcessCountConvert(*args)
PostProcessCountConvert = _andor.PostProcessCountConvert

def PostProcessPhotonCounting(*args):
  return _andor.PostProcessPhotonCounting(*args)
PostProcessPhotonCounting = _andor.PostProcessPhotonCounting

def PostProcessDataAveraging(*args):
  return _andor.PostProcessDataAveraging(*args)
PostProcessDataAveraging = _andor.PostProcessDataAveraging
DRV_ERROR_CODES = _andor.DRV_ERROR_CODES
DRV_SUCCESS = _andor.DRV_SUCCESS
DRV_VXDNOTINSTALLED = _andor.DRV_VXDNOTINSTALLED
DRV_ERROR_SCAN = _andor.DRV_ERROR_SCAN
DRV_ERROR_CHECK_SUM = _andor.DRV_ERROR_CHECK_SUM
DRV_ERROR_FILELOAD = _andor.DRV_ERROR_FILELOAD
DRV_UNKNOWN_FUNCTION = _andor.DRV_UNKNOWN_FUNCTION
DRV_ERROR_VXD_INIT = _andor.DRV_ERROR_VXD_INIT
DRV_ERROR_ADDRESS = _andor.DRV_ERROR_ADDRESS
DRV_ERROR_PAGELOCK = _andor.DRV_ERROR_PAGELOCK
DRV_ERROR_PAGEUNLOCK = _andor.DRV_ERROR_PAGEUNLOCK
DRV_ERROR_BOARDTEST = _andor.DRV_ERROR_BOARDTEST
DRV_ERROR_ACK = _andor.DRV_ERROR_ACK
DRV_ERROR_UP_FIFO = _andor.DRV_ERROR_UP_FIFO
DRV_ERROR_PATTERN = _andor.DRV_ERROR_PATTERN
DRV_ACQUISITION_ERRORS = _andor.DRV_ACQUISITION_ERRORS
DRV_ACQ_BUFFER = _andor.DRV_ACQ_BUFFER
DRV_ACQ_DOWNFIFO_FULL = _andor.DRV_ACQ_DOWNFIFO_FULL
DRV_PROC_UNKONWN_INSTRUCTION = _andor.DRV_PROC_UNKONWN_INSTRUCTION
DRV_ILLEGAL_OP_CODE = _andor.DRV_ILLEGAL_OP_CODE
DRV_KINETIC_TIME_NOT_MET = _andor.DRV_KINETIC_TIME_NOT_MET
DRV_ACCUM_TIME_NOT_MET = _andor.DRV_ACCUM_TIME_NOT_MET
DRV_NO_NEW_DATA = _andor.DRV_NO_NEW_DATA
KERN_MEM_ERROR = _andor.KERN_MEM_ERROR
DRV_SPOOLERROR = _andor.DRV_SPOOLERROR
DRV_SPOOLSETUPERROR = _andor.DRV_SPOOLSETUPERROR
DRV_FILESIZELIMITERROR = _andor.DRV_FILESIZELIMITERROR
DRV_ERROR_FILESAVE = _andor.DRV_ERROR_FILESAVE
DRV_TEMPERATURE_CODES = _andor.DRV_TEMPERATURE_CODES
DRV_TEMPERATURE_OFF = _andor.DRV_TEMPERATURE_OFF
DRV_TEMPERATURE_NOT_STABILIZED = _andor.DRV_TEMPERATURE_NOT_STABILIZED
DRV_TEMPERATURE_STABILIZED = _andor.DRV_TEMPERATURE_STABILIZED
DRV_TEMPERATURE_NOT_REACHED = _andor.DRV_TEMPERATURE_NOT_REACHED
DRV_TEMPERATURE_OUT_RANGE = _andor.DRV_TEMPERATURE_OUT_RANGE
DRV_TEMPERATURE_NOT_SUPPORTED = _andor.DRV_TEMPERATURE_NOT_SUPPORTED
DRV_TEMPERATURE_DRIFT = _andor.DRV_TEMPERATURE_DRIFT
DRV_TEMP_CODES = _andor.DRV_TEMP_CODES
DRV_TEMP_OFF = _andor.DRV_TEMP_OFF
DRV_TEMP_NOT_STABILIZED = _andor.DRV_TEMP_NOT_STABILIZED
DRV_TEMP_STABILIZED = _andor.DRV_TEMP_STABILIZED
DRV_TEMP_NOT_REACHED = _andor.DRV_TEMP_NOT_REACHED
DRV_TEMP_OUT_RANGE = _andor.DRV_TEMP_OUT_RANGE
DRV_TEMP_NOT_SUPPORTED = _andor.DRV_TEMP_NOT_SUPPORTED
DRV_TEMP_DRIFT = _andor.DRV_TEMP_DRIFT
DRV_GENERAL_ERRORS = _andor.DRV_GENERAL_ERRORS
DRV_INVALID_AUX = _andor.DRV_INVALID_AUX
DRV_COF_NOTLOADED = _andor.DRV_COF_NOTLOADED
DRV_FPGAPROG = _andor.DRV_FPGAPROG
DRV_FLEXERROR = _andor.DRV_FLEXERROR
DRV_GPIBERROR = _andor.DRV_GPIBERROR
DRV_EEPROMVERSIONERROR = _andor.DRV_EEPROMVERSIONERROR
DRV_DATATYPE = _andor.DRV_DATATYPE
DRV_DRIVER_ERRORS = _andor.DRV_DRIVER_ERRORS
DRV_P1INVALID = _andor.DRV_P1INVALID
DRV_P2INVALID = _andor.DRV_P2INVALID
DRV_P3INVALID = _andor.DRV_P3INVALID
DRV_P4INVALID = _andor.DRV_P4INVALID
DRV_INIERROR = _andor.DRV_INIERROR
DRV_COFERROR = _andor.DRV_COFERROR
DRV_ACQUIRING = _andor.DRV_ACQUIRING
DRV_IDLE = _andor.DRV_IDLE
DRV_TEMPCYCLE = _andor.DRV_TEMPCYCLE
DRV_NOT_INITIALIZED = _andor.DRV_NOT_INITIALIZED
DRV_P5INVALID = _andor.DRV_P5INVALID
DRV_P6INVALID = _andor.DRV_P6INVALID
DRV_INVALID_MODE = _andor.DRV_INVALID_MODE
DRV_INVALID_FILTER = _andor.DRV_INVALID_FILTER
DRV_I2CERRORS = _andor.DRV_I2CERRORS
DRV_I2CDEVNOTFOUND = _andor.DRV_I2CDEVNOTFOUND
DRV_I2CTIMEOUT = _andor.DRV_I2CTIMEOUT
DRV_P7INVALID = _andor.DRV_P7INVALID
DRV_P8INVALID = _andor.DRV_P8INVALID
DRV_P9INVALID = _andor.DRV_P9INVALID
DRV_P10INVALID = _andor.DRV_P10INVALID
DRV_P11INVALID = _andor.DRV_P11INVALID
DRV_USBERROR = _andor.DRV_USBERROR
DRV_IOCERROR = _andor.DRV_IOCERROR
DRV_VRMVERSIONERROR = _andor.DRV_VRMVERSIONERROR
DRV_GATESTEPERROR = _andor.DRV_GATESTEPERROR
DRV_USB_INTERRUPT_ENDPOINT_ERROR = _andor.DRV_USB_INTERRUPT_ENDPOINT_ERROR
DRV_RANDOM_TRACK_ERROR = _andor.DRV_RANDOM_TRACK_ERROR
DRV_INVALID_TRIGGER_MODE = _andor.DRV_INVALID_TRIGGER_MODE
DRV_LOAD_FIRMWARE_ERROR = _andor.DRV_LOAD_FIRMWARE_ERROR
DRV_DIVIDE_BY_ZERO_ERROR = _andor.DRV_DIVIDE_BY_ZERO_ERROR
DRV_INVALID_RINGEXPOSURES = _andor.DRV_INVALID_RINGEXPOSURES
DRV_BINNING_ERROR = _andor.DRV_BINNING_ERROR
DRV_INVALID_AMPLIFIER = _andor.DRV_INVALID_AMPLIFIER
DRV_INVALID_COUNTCONVERT_MODE = _andor.DRV_INVALID_COUNTCONVERT_MODE
DRV_ERROR_NOCAMERA = _andor.DRV_ERROR_NOCAMERA
DRV_NOT_SUPPORTED = _andor.DRV_NOT_SUPPORTED
DRV_NOT_AVAILABLE = _andor.DRV_NOT_AVAILABLE
DRV_ERROR_MAP = _andor.DRV_ERROR_MAP
DRV_ERROR_UNMAP = _andor.DRV_ERROR_UNMAP
DRV_ERROR_MDL = _andor.DRV_ERROR_MDL
DRV_ERROR_UNMDL = _andor.DRV_ERROR_UNMDL
DRV_ERROR_BUFFSIZE = _andor.DRV_ERROR_BUFFSIZE
DRV_ERROR_NOHANDLE = _andor.DRV_ERROR_NOHANDLE
DRV_GATING_NOT_AVAILABLE = _andor.DRV_GATING_NOT_AVAILABLE
DRV_FPGA_VOLTAGE_ERROR = _andor.DRV_FPGA_VOLTAGE_ERROR
DRV_OW_CMD_FAIL = _andor.DRV_OW_CMD_FAIL
DRV_OWMEMORY_BAD_ADDR = _andor.DRV_OWMEMORY_BAD_ADDR
DRV_OWCMD_NOT_AVAILABLE = _andor.DRV_OWCMD_NOT_AVAILABLE
DRV_OW_NO_SLAVES = _andor.DRV_OW_NO_SLAVES
DRV_OW_NOT_INITIALIZED = _andor.DRV_OW_NOT_INITIALIZED
DRV_OW_ERROR_SLAVE_NUM = _andor.DRV_OW_ERROR_SLAVE_NUM
DRV_MSTIMINGS_ERROR = _andor.DRV_MSTIMINGS_ERROR
DRV_OA_NULL_ERROR = _andor.DRV_OA_NULL_ERROR
DRV_OA_PARSE_DTD_ERROR = _andor.DRV_OA_PARSE_DTD_ERROR
DRV_OA_DTD_VALIDATE_ERROR = _andor.DRV_OA_DTD_VALIDATE_ERROR
DRV_OA_FILE_ACCESS_ERROR = _andor.DRV_OA_FILE_ACCESS_ERROR
DRV_OA_FILE_DOES_NOT_EXIST = _andor.DRV_OA_FILE_DOES_NOT_EXIST
DRV_OA_XML_INVALID_OR_NOT_FOUND_ERROR = _andor.DRV_OA_XML_INVALID_OR_NOT_FOUND_ERROR
DRV_OA_PRESET_FILE_NOT_LOADED = _andor.DRV_OA_PRESET_FILE_NOT_LOADED
DRV_OA_USER_FILE_NOT_LOADED = _andor.DRV_OA_USER_FILE_NOT_LOADED
DRV_OA_PRESET_AND_USER_FILE_NOT_LOADED = _andor.DRV_OA_PRESET_AND_USER_FILE_NOT_LOADED
DRV_OA_INVALID_FILE = _andor.DRV_OA_INVALID_FILE
DRV_OA_FILE_HAS_BEEN_MODIFIED = _andor.DRV_OA_FILE_HAS_BEEN_MODIFIED
DRV_OA_BUFFER_FULL = _andor.DRV_OA_BUFFER_FULL
DRV_OA_INVALID_STRING_LENGTH = _andor.DRV_OA_INVALID_STRING_LENGTH
DRV_OA_INVALID_CHARS_IN_NAME = _andor.DRV_OA_INVALID_CHARS_IN_NAME
DRV_OA_INVALID_NAMING = _andor.DRV_OA_INVALID_NAMING
DRV_OA_GET_CAMERA_ERROR = _andor.DRV_OA_GET_CAMERA_ERROR
DRV_OA_MODE_ALREADY_EXISTS = _andor.DRV_OA_MODE_ALREADY_EXISTS
DRV_OA_STRINGS_NOT_EQUAL = _andor.DRV_OA_STRINGS_NOT_EQUAL
DRV_OA_NO_USER_DATA = _andor.DRV_OA_NO_USER_DATA
DRV_OA_VALUE_NOT_SUPPORTED = _andor.DRV_OA_VALUE_NOT_SUPPORTED
DRV_OA_MODE_DOES_NOT_EXIST = _andor.DRV_OA_MODE_DOES_NOT_EXIST
DRV_OA_CAMERA_NOT_SUPPORTED = _andor.DRV_OA_CAMERA_NOT_SUPPORTED
DRV_OA_FAILED_TO_GET_MODE = _andor.DRV_OA_FAILED_TO_GET_MODE
DRV_PROCESSING_FAILED = _andor.DRV_PROCESSING_FAILED
AC_ACQMODE_SINGLE = _andor.AC_ACQMODE_SINGLE
AC_ACQMODE_VIDEO = _andor.AC_ACQMODE_VIDEO
AC_ACQMODE_ACCUMULATE = _andor.AC_ACQMODE_ACCUMULATE
AC_ACQMODE_KINETIC = _andor.AC_ACQMODE_KINETIC
AC_ACQMODE_FRAMETRANSFER = _andor.AC_ACQMODE_FRAMETRANSFER
AC_ACQMODE_FASTKINETICS = _andor.AC_ACQMODE_FASTKINETICS
AC_ACQMODE_OVERLAP = _andor.AC_ACQMODE_OVERLAP
AC_ACQMODE_SUPERKINETICS = _andor.AC_ACQMODE_SUPERKINETICS
AC_ACQMODE_TIMESCAN = _andor.AC_ACQMODE_TIMESCAN
AC_READMODE_FULLIMAGE = _andor.AC_READMODE_FULLIMAGE
AC_READMODE_SUBIMAGE = _andor.AC_READMODE_SUBIMAGE
AC_READMODE_SINGLETRACK = _andor.AC_READMODE_SINGLETRACK
AC_READMODE_FVB = _andor.AC_READMODE_FVB
AC_READMODE_MULTITRACK = _andor.AC_READMODE_MULTITRACK
AC_READMODE_RANDOMTRACK = _andor.AC_READMODE_RANDOMTRACK
AC_READMODE_MULTITRACKSCAN = _andor.AC_READMODE_MULTITRACKSCAN
AC_TRIGGERMODE_INTERNAL = _andor.AC_TRIGGERMODE_INTERNAL
AC_TRIGGERMODE_EXTERNAL = _andor.AC_TRIGGERMODE_EXTERNAL
AC_TRIGGERMODE_EXTERNAL_FVB_EM = _andor.AC_TRIGGERMODE_EXTERNAL_FVB_EM
AC_TRIGGERMODE_CONTINUOUS = _andor.AC_TRIGGERMODE_CONTINUOUS
AC_TRIGGERMODE_EXTERNALSTART = _andor.AC_TRIGGERMODE_EXTERNALSTART
AC_TRIGGERMODE_EXTERNALEXPOSURE = _andor.AC_TRIGGERMODE_EXTERNALEXPOSURE
AC_TRIGGERMODE_INVERTED = _andor.AC_TRIGGERMODE_INVERTED
AC_TRIGGERMODE_EXTERNAL_CHARGESHIFTING = _andor.AC_TRIGGERMODE_EXTERNAL_CHARGESHIFTING
AC_TRIGGERMODE_BULB = _andor.AC_TRIGGERMODE_BULB
AC_CAMERATYPE_PDA = _andor.AC_CAMERATYPE_PDA
AC_CAMERATYPE_IXON = _andor.AC_CAMERATYPE_IXON
AC_CAMERATYPE_ICCD = _andor.AC_CAMERATYPE_ICCD
AC_CAMERATYPE_EMCCD = _andor.AC_CAMERATYPE_EMCCD
AC_CAMERATYPE_CCD = _andor.AC_CAMERATYPE_CCD
AC_CAMERATYPE_ISTAR = _andor.AC_CAMERATYPE_ISTAR
AC_CAMERATYPE_VIDEO = _andor.AC_CAMERATYPE_VIDEO
AC_CAMERATYPE_IDUS = _andor.AC_CAMERATYPE_IDUS
AC_CAMERATYPE_NEWTON = _andor.AC_CAMERATYPE_NEWTON
AC_CAMERATYPE_SURCAM = _andor.AC_CAMERATYPE_SURCAM
AC_CAMERATYPE_USBICCD = _andor.AC_CAMERATYPE_USBICCD
AC_CAMERATYPE_LUCA = _andor.AC_CAMERATYPE_LUCA
AC_CAMERATYPE_RESERVED = _andor.AC_CAMERATYPE_RESERVED
AC_CAMERATYPE_IKON = _andor.AC_CAMERATYPE_IKON
AC_CAMERATYPE_INGAAS = _andor.AC_CAMERATYPE_INGAAS
AC_CAMERATYPE_IVAC = _andor.AC_CAMERATYPE_IVAC
AC_CAMERATYPE_UNPROGRAMMED = _andor.AC_CAMERATYPE_UNPROGRAMMED
AC_CAMERATYPE_CLARA = _andor.AC_CAMERATYPE_CLARA
AC_CAMERATYPE_USBISTAR = _andor.AC_CAMERATYPE_USBISTAR
AC_CAMERATYPE_SIMCAM = _andor.AC_CAMERATYPE_SIMCAM
AC_CAMERATYPE_NEO = _andor.AC_CAMERATYPE_NEO
AC_CAMERATYPE_IXONULTRA = _andor.AC_CAMERATYPE_IXONULTRA
AC_CAMERATYPE_VOLMOS = _andor.AC_CAMERATYPE_VOLMOS
AC_CAMERATYPE_IVAC_CCD = _andor.AC_CAMERATYPE_IVAC_CCD
AC_CAMERATYPE_ASPEN = _andor.AC_CAMERATYPE_ASPEN
AC_CAMERATYPE_ASCENT = _andor.AC_CAMERATYPE_ASCENT
AC_CAMERATYPE_ALTA = _andor.AC_CAMERATYPE_ALTA
AC_CAMERATYPE_ALTAF = _andor.AC_CAMERATYPE_ALTAF
AC_CAMERATYPE_IKONXL = _andor.AC_CAMERATYPE_IKONXL
AC_CAMERATYPE_RES1 = _andor.AC_CAMERATYPE_RES1
AC_PIXELMODE_8BIT = _andor.AC_PIXELMODE_8BIT
AC_PIXELMODE_14BIT = _andor.AC_PIXELMODE_14BIT
AC_PIXELMODE_16BIT = _andor.AC_PIXELMODE_16BIT
AC_PIXELMODE_32BIT = _andor.AC_PIXELMODE_32BIT
AC_PIXELMODE_MONO = _andor.AC_PIXELMODE_MONO
AC_PIXELMODE_RGB = _andor.AC_PIXELMODE_RGB
AC_PIXELMODE_CMY = _andor.AC_PIXELMODE_CMY
AC_SETFUNCTION_VREADOUT = _andor.AC_SETFUNCTION_VREADOUT
AC_SETFUNCTION_HREADOUT = _andor.AC_SETFUNCTION_HREADOUT
AC_SETFUNCTION_TEMPERATURE = _andor.AC_SETFUNCTION_TEMPERATURE
AC_SETFUNCTION_MCPGAIN = _andor.AC_SETFUNCTION_MCPGAIN
AC_SETFUNCTION_EMCCDGAIN = _andor.AC_SETFUNCTION_EMCCDGAIN
AC_SETFUNCTION_BASELINECLAMP = _andor.AC_SETFUNCTION_BASELINECLAMP
AC_SETFUNCTION_VSAMPLITUDE = _andor.AC_SETFUNCTION_VSAMPLITUDE
AC_SETFUNCTION_HIGHCAPACITY = _andor.AC_SETFUNCTION_HIGHCAPACITY
AC_SETFUNCTION_BASELINEOFFSET = _andor.AC_SETFUNCTION_BASELINEOFFSET
AC_SETFUNCTION_PREAMPGAIN = _andor.AC_SETFUNCTION_PREAMPGAIN
AC_SETFUNCTION_CROPMODE = _andor.AC_SETFUNCTION_CROPMODE
AC_SETFUNCTION_DMAPARAMETERS = _andor.AC_SETFUNCTION_DMAPARAMETERS
AC_SETFUNCTION_HORIZONTALBIN = _andor.AC_SETFUNCTION_HORIZONTALBIN
AC_SETFUNCTION_MULTITRACKHRANGE = _andor.AC_SETFUNCTION_MULTITRACKHRANGE
AC_SETFUNCTION_RANDOMTRACKNOGAPS = _andor.AC_SETFUNCTION_RANDOMTRACKNOGAPS
AC_SETFUNCTION_EMADVANCED = _andor.AC_SETFUNCTION_EMADVANCED
AC_SETFUNCTION_GATEMODE = _andor.AC_SETFUNCTION_GATEMODE
AC_SETFUNCTION_DDGTIMES = _andor.AC_SETFUNCTION_DDGTIMES
AC_SETFUNCTION_IOC = _andor.AC_SETFUNCTION_IOC
AC_SETFUNCTION_INTELLIGATE = _andor.AC_SETFUNCTION_INTELLIGATE
AC_SETFUNCTION_INSERTION_DELAY = _andor.AC_SETFUNCTION_INSERTION_DELAY
AC_SETFUNCTION_GATESTEP = _andor.AC_SETFUNCTION_GATESTEP
AC_SETFUNCTION_GATEDELAYSTEP = _andor.AC_SETFUNCTION_GATEDELAYSTEP
AC_SETFUNCTION_TRIGGERTERMINATION = _andor.AC_SETFUNCTION_TRIGGERTERMINATION
AC_SETFUNCTION_EXTENDEDNIR = _andor.AC_SETFUNCTION_EXTENDEDNIR
AC_SETFUNCTION_SPOOLTHREADCOUNT = _andor.AC_SETFUNCTION_SPOOLTHREADCOUNT
AC_SETFUNCTION_REGISTERPACK = _andor.AC_SETFUNCTION_REGISTERPACK
AC_SETFUNCTION_PRESCANS = _andor.AC_SETFUNCTION_PRESCANS
AC_SETFUNCTION_GATEWIDTHSTEP = _andor.AC_SETFUNCTION_GATEWIDTHSTEP
AC_SETFUNCTION_EXTENDED_CROP_MODE = _andor.AC_SETFUNCTION_EXTENDED_CROP_MODE
AC_SETFUNCTION_GAIN = _andor.AC_SETFUNCTION_GAIN
AC_SETFUNCTION_ICCDGAIN = _andor.AC_SETFUNCTION_ICCDGAIN
AC_GETFUNCTION_TEMPERATURE = _andor.AC_GETFUNCTION_TEMPERATURE
AC_GETFUNCTION_TARGETTEMPERATURE = _andor.AC_GETFUNCTION_TARGETTEMPERATURE
AC_GETFUNCTION_TEMPERATURERANGE = _andor.AC_GETFUNCTION_TEMPERATURERANGE
AC_GETFUNCTION_DETECTORSIZE = _andor.AC_GETFUNCTION_DETECTORSIZE
AC_GETFUNCTION_MCPGAIN = _andor.AC_GETFUNCTION_MCPGAIN
AC_GETFUNCTION_EMCCDGAIN = _andor.AC_GETFUNCTION_EMCCDGAIN
AC_GETFUNCTION_HVFLAG = _andor.AC_GETFUNCTION_HVFLAG
AC_GETFUNCTION_GATEMODE = _andor.AC_GETFUNCTION_GATEMODE
AC_GETFUNCTION_DDGTIMES = _andor.AC_GETFUNCTION_DDGTIMES
AC_GETFUNCTION_IOC = _andor.AC_GETFUNCTION_IOC
AC_GETFUNCTION_INTELLIGATE = _andor.AC_GETFUNCTION_INTELLIGATE
AC_GETFUNCTION_INSERTION_DELAY = _andor.AC_GETFUNCTION_INSERTION_DELAY
AC_GETFUNCTION_GATESTEP = _andor.AC_GETFUNCTION_GATESTEP
AC_GETFUNCTION_GATEDELAYSTEP = _andor.AC_GETFUNCTION_GATEDELAYSTEP
AC_GETFUNCTION_PHOSPHORSTATUS = _andor.AC_GETFUNCTION_PHOSPHORSTATUS
AC_GETFUNCTION_MCPGAINTABLE = _andor.AC_GETFUNCTION_MCPGAINTABLE
AC_GETFUNCTION_BASELINECLAMP = _andor.AC_GETFUNCTION_BASELINECLAMP
AC_GETFUNCTION_GATEWIDTHSTEP = _andor.AC_GETFUNCTION_GATEWIDTHSTEP
AC_GETFUNCTION_GAIN = _andor.AC_GETFUNCTION_GAIN
AC_GETFUNCTION_ICCDGAIN = _andor.AC_GETFUNCTION_ICCDGAIN
AC_FEATURES_POLLING = _andor.AC_FEATURES_POLLING
AC_FEATURES_EVENTS = _andor.AC_FEATURES_EVENTS
AC_FEATURES_SPOOLING = _andor.AC_FEATURES_SPOOLING
AC_FEATURES_SHUTTER = _andor.AC_FEATURES_SHUTTER
AC_FEATURES_SHUTTEREX = _andor.AC_FEATURES_SHUTTEREX
AC_FEATURES_EXTERNAL_I2C = _andor.AC_FEATURES_EXTERNAL_I2C
AC_FEATURES_SATURATIONEVENT = _andor.AC_FEATURES_SATURATIONEVENT
AC_FEATURES_FANCONTROL = _andor.AC_FEATURES_FANCONTROL
AC_FEATURES_MIDFANCONTROL = _andor.AC_FEATURES_MIDFANCONTROL
AC_FEATURES_TEMPERATUREDURINGACQUISITION = _andor.AC_FEATURES_TEMPERATUREDURINGACQUISITION
AC_FEATURES_KEEPCLEANCONTROL = _andor.AC_FEATURES_KEEPCLEANCONTROL
AC_FEATURES_DDGLITE = _andor.AC_FEATURES_DDGLITE
AC_FEATURES_FTEXTERNALEXPOSURE = _andor.AC_FEATURES_FTEXTERNALEXPOSURE
AC_FEATURES_KINETICEXTERNALEXPOSURE = _andor.AC_FEATURES_KINETICEXTERNALEXPOSURE
AC_FEATURES_DACCONTROL = _andor.AC_FEATURES_DACCONTROL
AC_FEATURES_METADATA = _andor.AC_FEATURES_METADATA
AC_FEATURES_IOCONTROL = _andor.AC_FEATURES_IOCONTROL
AC_FEATURES_PHOTONCOUNTING = _andor.AC_FEATURES_PHOTONCOUNTING
AC_FEATURES_COUNTCONVERT = _andor.AC_FEATURES_COUNTCONVERT
AC_FEATURES_DUALMODE = _andor.AC_FEATURES_DUALMODE
AC_FEATURES_OPTACQUIRE = _andor.AC_FEATURES_OPTACQUIRE
AC_FEATURES_REALTIMESPURIOUSNOISEFILTER = _andor.AC_FEATURES_REALTIMESPURIOUSNOISEFILTER
AC_FEATURES_POSTPROCESSSPURIOUSNOISEFILTER = _andor.AC_FEATURES_POSTPROCESSSPURIOUSNOISEFILTER
AC_FEATURES_DUALPREAMPGAIN = _andor.AC_FEATURES_DUALPREAMPGAIN
AC_FEATURES_DEFECT_CORRECTION = _andor.AC_FEATURES_DEFECT_CORRECTION
AC_FEATURES_STARTOFEXPOSURE_EVENT = _andor.AC_FEATURES_STARTOFEXPOSURE_EVENT
AC_FEATURES_ENDOFEXPOSURE_EVENT = _andor.AC_FEATURES_ENDOFEXPOSURE_EVENT
AC_FEATURES_CAMERALINK = _andor.AC_FEATURES_CAMERALINK
AC_FEATURES_FIFOFULL_EVENT = _andor.AC_FEATURES_FIFOFULL_EVENT
AC_FEATURES_SENSOR_PORT_CONFIGURATION = _andor.AC_FEATURES_SENSOR_PORT_CONFIGURATION
AC_FEATURES_SENSOR_COMPENSATION = _andor.AC_FEATURES_SENSOR_COMPENSATION
AC_FEATURES_IRIG_SUPPORT = _andor.AC_FEATURES_IRIG_SUPPORT
AC_EMGAIN_8BIT = _andor.AC_EMGAIN_8BIT
AC_EMGAIN_12BIT = _andor.AC_EMGAIN_12BIT
AC_EMGAIN_LINEAR12 = _andor.AC_EMGAIN_LINEAR12
AC_EMGAIN_REAL12 = _andor.AC_EMGAIN_REAL12
# This file is compatible with both classic and new-style classes.


