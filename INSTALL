Installation Instructions
=========================

1. The file install_andor contains the script that installs your camera.
2. To run the script you must have root priveleges.
3. Run the script from the andor install directory by opening a root console, cd'ing to the
   andor install directory and typing the command:
        ./install_andor

The install script depends on your linux distribution supporting a certain configuration namely that loadable modules can be used and these modules are stored in the directory /lib/modules/<kernel version>/

Having installed the driver you should return yourself to user priveleges.


SDK library
-----------

The Andor SDK library (libandor.so) and corresponding C/C++ header file (atmcdLXd.h) will be installed into the /usr/local directory tree. The library can be linked to an application by passing the linker option -landor. When including the header file ensure that the correct case is used. For USB systems the libatusbfs.so interface library, which is used internally by the SDK to interface with libusb, will also be copied to the /usr/local/lib directory. The pdf help file will be copied to /usr/local/doc.

Configuration Files
-------------------

Configuration and Firmware files required by Andor cameras will be copied to the /usr/local/etc/andor directory. This directory path must be passed to the SDK Initialize function.

PCI Device Driver
-----------------

During the installation for PCI systems the device driver source code (src/) will be compiled. For this to succeed the kernel headers must be installed on your system. The driver will be copied to the /lib/modules/<kernel version> directory and commands will be added to the startup script to load this driver when the system is booted.

USB hotplug scripts
-------------------

Scripts that detect the insertion of Andor cameras are copied to the /etc/hotplug/usb directory. These will automatically allow read/write access to the usb device files created under /proc/bus/usb as devices are plugged in and out.

Examples
--------

Once the andor driver has been successfully installed, the system can be tested through the example programs.

console/
        These examples are text based and can be run from a command prompt.


To build and run a particular example:

1. cd into the example directory that you wish to make.
2. type 'make'
3. run the example.

eg $ cd examples/console/image
   $ make
   $ ./image

Supported Kernels
-----------------

Some kernels have issues which can cause problems with our driver and SDK. Always try to use the latest SDK version for most support and note the following known problem kernel versions.

- There are USB issues with kernel versions 2.6.23.xx & 2.6.24.xx and potentially 3.x.x.xx (still investigating) for USB cameras. Customers should avoid these kernel versions when using USB cameras.

- There are issues with the "mem=" option in kernel version 2.6.24.xx to 2.6.26.xx. This causes incorrect behaviour when using PCI cameras in DMA_MODE 1 (iXons included). Customers shoulde use 2.6.23.xx and lower or 2.6.27.xx and higher when using PCI based systems. If not, kernel crashes will be seen in SDK versions 2.82.30002.0 and earlier. In later versions user space applications will freeze on acquisition and kernel errors will be reported but the kernel will not crash.

Troubleshooting
---------------

There are several issues which may cause the installation of the andor driver to fail. The install script will inform you of the following errors described below.

--You must have root priveleges to install the andor software

        To run the andor install script, you should either be logged on as the root user of your linux computer or access root priveleges using the su command from a console prompt.  If you do not know the root password then ask your system administrator, or the person that installed linux on the machine.

--Invalid Type

	You have selected an index in the camera select menu that is out of range.

--Module directory * not found

        This error indicates that either loadable modules are installed in a different directory on your system or that loadable module support has not been enabled in the kernel. In the former case you have two options:
                1. Edit the line 'set moduledir = /lib/modules/$kernel_release' in the file install_andordrvlx to point to the modules directory for your system and rerun the install file.
                2. Manually install the driver each time the system is booted see section 'Manual Installation' 
        In the latter case, the Andor software cannot be used with this kernel, and either a different kernel or distribution should be used, or the kernel should be recompiled with loadable kernel support enabled.

--Installation of andor driver module failed - Cannot locate startup script

        In this case the system startup script rc.local has not been found in the /etc directory.  You have two options.
                1. Edit the lines 'set rc_dir = /etc' and 'set rc_file = rc.local' in the file install_andordrvlx to point to the correct start up script file and directory and rerun the script.
                2. Manually install the driver each time the system is booted see section 'Manual Installation'

--Kernel source not installed. Cannot build device driver.

	The script will look for kernel headers in the /lib/modules/<kernel version>/build/include directory. If this directory is not found then the kernel headers may not be present on your system. These will need to be installed.

--Kernel Minor version not supported

	Only linux kernels in the 2.4 and 2.6 trees are currently supported.

--Driver build failed, cannot continue installation. See build.txt file in src directory.

	While compiling the device driver, at least one error was encountered. The output from the compiler can be found in src/build.txt. Any errors will need to be fixed with changes to the source and the installation rerun. Please forward any compilation problems to your local Andor representative along with the build.txt file.

--Valid libstdc++.so not Detected
	
	Versions 5 and 6 of libstdc++.so are currently supported. The installer has detected a different version or the library does not exist. Check /usr/lib/libstdc++*.

--Valid SDK library not found for your system:

	A valid verion of libstdc++.so was found but the target platform was not supported.

Manual Installation
-------------------

If the installation script has failed or you prefer to install the andor driver manually on each startup of linux, the files andordrvlx_manual_load and andordrvlx__manual_unload are provided in the andor/script directory. Copy these two files into the the andor/src directory. On each bootup open a console, cd into the directory to which you copied the files and type the following command
        sh ./andordrvlx_manual_load

The andor driver can be removed from the system by following the above procedure but typing
        sh ./andordrvlx_manual_unload

You must have root priveleges to run these files.


Large DMA Transfers
-------------------

The Andor Linux PCI Device Driver module can run in either of two modes. These modes are distinguished by the way in which data is transfered from the controller card to computer RAM. The default mode is for data to be transfered to RAM one line at a time, however this can result in interrupts being generated at too high a rate for the linux operating system to respond. This may lead to, for example, acquisitions appearing to hang. 

To slow down the rate of generated interrupts the driver can be installed in a second mode which performs DMA transfers one image at a time. This is the only mode available for iXon cameras but can also be used for other CCD's, (see below). This second mode however requires that a portion of RAM be set aside for use only by the Andor Driver by passing the mem= parameter to your kernel at boot time. The amount of memory to reserve depends on your CCD chip size and should be enough to store two full images at 4 bytes per pixel. 

eg. For ixon DV887 - chip size 512x512
    The amount of memory required = 2 x 512 x 512 x 4 bytes
				  = 2097152 bytes = 2 MB

The mem= parameter tells the operating system to only use memory up to the value that the parameter is set to. For eg if you have 512 MB of RAM and you pass 'mem=510M' to the kernel. The kernel will only use 510MB of RAM allowing the Andor Driver to use the upper 2MB for DMA transfers. 

During installation the install_andordrvlx script will automatically configure the driver in the default mode for your selected camera. ie DMA_MODE=1 for iXons and DMA_MODE=0 for all others.  The method by which the 'mem=' parameter is passed to the kernel varies depending on you bootloader.

For Lilo you should edit the /etc/lilo.conf file (or whichever configuration file lilo is using) and add 'mem=XXXM' to the append line for your kernel, where XXX is the size of your installed RAM in MB minus the amount that is needed by the Andor Driver. Then run lilo and restart the computer.

eg. DV887 with 512 MB RAM installed:
Sample lilo.conf file

.....
image=/boot/vmlinuz
	label="linux"
	root=/dev/hda2
	initrd=/boot/initrd.img
	append="mem=510M"
	read-only
.....

For grub you should edit the menu.lst file in the /boot/grub directory and append the 'mem=XXXM' parameter to the kernel line similar to lilo, then reboot.

To set up standard CCD's to use the new DMA mode you should edit your rc.local file and append 'DMA_MODE=1' to the line that runs the andordrvlx_load script file ie.
	sh /etc/andordrvlx_load DMA_MODE=1
You will also need to edit the detector.ini file. Find the section in the detector.ini file for your CCD (eg for DV420 find the line [DV420]) and change the property under this section:
	CodeFile=pcii29k_sldma.cof 
or
	CodeFile=pci_29k_sldma.cof   

to
	CodeFile=pcii29k.cof 
or
	CodeFile=pci_29k.cof   

Then follow the instructions above for adding the 'mem=' parameter to your bootloader, and reboot the computer.

Two other module parameters are available for more control over the location and size of the DMA area. These are DMA_ADDRESS and DMA_SIZE and are decribed in the Release Notes file.

Systems with greater than 3GB of RAM
------------------------------------

NOTE: Only applicable to PCI systems.

Option 1
--------

When using DMA_MODE=1 and adding "mem=" to your boot loader, you will not able to set "mem=" to a value greater than approximately 3GB (it varies slightly from system to system). The Andor PCI card cannot utilize memory addresses above 4GB and the operating system cannot mark off regions below 4GB for driver usage while still using memory above 4GB for general application use. This means that to use an Andor PCI card in a system with over 3GB of RAM, you will need to use "mem=3000" and the memory above 3GB cannot be used by the operating system.

It may be possible to overcome this issue, however, by rebuilding the Andor driver module with an alternate configuration. The driver can be compiled so that the DMA occurs in a region of memory allocated by a call to "get_free_pages". This is currently used in DMA_MODE=0 (line transfer mode) but this function has a limit to the amount of memory it can allocate and this is why it is normally not used for image DMA transfer.

The memory allocation is specified as an order-of-2 pages and the limit for earlier kernels was 5 (i.e. 2^5 = 32 pages, 4KB pages equates to 128KB). In the Andor code we have defined the order as 5 thus limiting the allocation to 128KB. This is fine for line transfers but not for image transfers. More modern kernels, with systems being fitted with larger memory footprints, have a higher maximum order (2 to the power of 10 or 11 which equates to 4MB or 8MB). By modifying the define, DMA_PAGE_ORD (line 34), in "andor.c" to a different value and changing lines 91,150 and 222 from,

      if (DMA_MODE == 0) {
      
   to
   
      if (DMA_MODE == 0 || DMA_MODE == 1) {

   The driver will attempt to allocate memory for image DMA transfer using get_free_pages. As the amount of memory required for the Andor Driver is "(4 bytes * sensor size in pixels * 2 images)" for a 1 megapixel camera you will need 8MB or an order of 11. So line 34 would change from,
   
       #define DMA_PAGE_ORD 5
   
   to

       #define DMA_PAGE_ORD 11
       
By looking in your kernel source you should be able to see what your maximum order is (see "linux/mmzone.h") or you can also rebuild your kernel to have a specified maximum order. 

WARNING: Note that the reason this limit is in place is because the memory allocation may fail the larger it gets i.e. it is more unlikely to find a contiguous block of the size requested. Increasing the value may cause your operating system to become unstable or your camera software to fail. This warning should be considered when attempting this mod.

Option 2
--------

It may be possible to update the kernel to reserve an area of memory by adding  "memmap=?M\$????M" to the kernel boot command line in GRUB.  This reserves ?MB of RAM at the Physical address ????M so that it will not be used by the Kernel and is free to be accessed for DMA.   
Example demonstarting reserving 8MB of memory at 1024M physical address (assuming GRUB2):
  open /etc/default/grub as superuser;
  find and edit GRUB_CMDLINE_LINUX_DEFAULT as follows - GRUB_CMDLINE_LINUX_DEFAULT="quiet splash memmap=8M\\\$1024M"
Note the escape character('\') as it is important the correct number (3) of these are included.
  Save and close the file;
  run update-grub.

To ensure the PCI driver uses the reserved memory it is necessary to add the DMA_SIZE and DMA_ADDRESS parameters to the module load script in /etc/rc.local like so: DMA_ADDRESS=1024 DMA_SIZE=8.

WARNING: This has not been fully verified to work for all systems and is therefore not guaranteed.

Open() failed ERROR
----------

On some systems USB hotplug does not work as expected and the camera will fail to initialize.  This amnifests as an "open() failed" error message.  As a workaround it is necessary to install additional libusb development files on to the system; details below (Ubuntu and Fedora are detailed but  similar command sets should work on other distributions):

Ubuntu:
1. Open terminal;
2. As superuser run the command 	`apt-get install libusb-dev`

Fedora:
1. Open terminal;
2. As superuser run the command 	`yum install libusb-devel'

